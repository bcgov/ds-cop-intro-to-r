[
["index.html", "Introduction to Data Science using R Workshop Chapter 1 Preface", " Introduction to Data Science using R Workshop Sam Albers, Stephanie Hazlitt &amp; Andy Teucher 2019-10-01 Chapter 1 Preface A repository to house materials for a 1-day course introducing participants to data science using R. The goal of this 1-day workshop is to teach new-to-programming data professionals to import data, clean up and summarize a data set, and make some static data visualizations using the program R. R is a popular statistical computing language, commonly used in many scientific disciplines for statistical analysis, generating production-quality graphics, and automating data workflow tasks. The workshop content will follow best practices for using R for data analysis, giving attendees a foundation in the fundamentals of R and scientific computing. Most of the above lesson material is sourced from the Software Carpentry Foundation (now The Carpenties) R for Reproducible Scientific Analysis lesson material: Thomas Wright and Naupaka Zimmerman (eds): Software Carpentry: R for Reproducible Scientific Analysis. Version 2016.06, June 2016, https://github.com/swcarpentry/r-novice-gapminder, 10.5281/zenodo.57520. "],
["introduction-to-r-and-rstudio.html", "Chapter 2 Introduction to R and RStudio 2.1 Motivation 2.2 Before Starting The Workshop 2.3 Introduction to RStudio 2.4 Work flow within RStudio 2.4 Tip: Running segments of your code 2.5 Introduction to R 2.6 Using R as a calculator 2.6 Tip: Cancelling commands 2.7 Mathematical functions 2.8 Comparing things 2.8 Tip: Comparing Numbers 2.9 Variables and assignment 2.9 Challenge 1 2.9 Solution to challenge 1 2.10 Vectorization 2.11 Managing your environment 2.11 Tip: hidden objects 2.11 Tip: Warnings vs. Errors 2.12 R Packages 2.12 Challenge 2 2.12 Solution to challenge 2 2.12 Challenge 3 2.12 Solution to challenge 3 2.12 Challenge 4 2.12 Solution to challenge 4 2.12 Challenge 5 2.12 Solution to challenge 5", " Chapter 2 Introduction to R and RStudio 2.1 Motivation Science is a multi-step process: once you’ve designed an experiment and collected data, the real fun begins! This lesson will teach you how to start this process using R and RStudio. We will begin with raw data, perform exploratory analyses, and learn how to plot results graphically. This example starts with a dataset from gapminder.org containing population information for many countries through time. Can you read the data into R? Can you plot the population for Senegal? Can you calculate the average income for countries on the continent of Asia? By the end of these lessons you will be able to do things like plot the populations for all of these countries in under a minute! 2.2 Before Starting The Workshop Please ensure you have the latest version of R and RStudio installed on your machine. This is important, as some packages used in the workshop may not install correctly (or at all) if R is not up to date. Download and install the latest version of R here Download and install RStudio here 2.3 Introduction to RStudio Welcome to the R portion of the Software Carpentry workshop. Throughout this lesson, we’re going to teach you some of the fundamentals of the R language as well as some best practices for organizing code for scientific projects that will make your life easier. We’ll be using RStudio: a free, open source R integrated development environment. It provides a built in editor, works on all platforms (including on servers) and provides many advantages such as integration with version control and project management. Basic layout When you first open RStudio, you will be greeted by three panels: The interactive R console (entire left) Environment/History (tabbed in upper right) Files/Plots/Packages/Help/Viewer (tabbed in lower right) RStudio layout Once you open files, such as R scripts, an editor panel will also open in the top left. RStudio layout with .R file open 2.4 Work flow within RStudio There are two main ways one can work within RStudio. Test and play within the interactive R console then copy code into a .R file to run later. This works well when doing small tests and initially starting off. It quickly becomes laborious Start writing in an .R file and use RStudio’s short cut keys for the Run command to push the current line, selected lines or modified lines to the interactive R console. This is a great way to start; all your code is saved for later You will be able to run the file you create from within RStudio or using R’s source() function. 2.4 Tip: Running segments of your code RStudio offers you great flexibility in running code from within the editor window. There are buttons, menu choices, and keyboard shortcuts. To run the current line, you can 1. click on the Run button above the editor panel, or 2. select “Run Lines” from the “Code” menu, or 3. hit Ctrl+Return in Windows or Linux or ⌘+Return on OS X. (This shortcut can also be seen by hovering the mouse over the button). To run a block of code, select it and then Run. If you have modified a line of code within a block of code you have just run, there is no need to reselect the section and Run, you can use the next button along, Re-run the previous region. This will run the previous code block including the modifications you have made. 2.5 Introduction to R Much of your time in R will be spent in the R interactive console. This is where you can run your code line-by-line, and can be a useful environment to try out ideas before adding them to an R script file. This console in RStudio is the same as the one you would get if you typed in R in your command-line environment. The first thing you will see in the R interactive session is a bunch of information, followed by a “&gt;” and a blinking cursor. It operates on a “Read, evaluate, print loop”: you type in commands, R tries to execute them, and then returns a result. 2.6 Using R as a calculator The simplest thing you could do with R is do arithmetic: 1 + 100 [1] 101 And R will print out the answer, with a preceding “[1]”. Don’t worry about this for now, we’ll explain that later. For now think of it as indicating output. If you type in an incomplete command, R will wait for you to complete it: &gt; 1 + + Any time you hit return and the R session shows a “+” instead of a “&gt;”, it means it’s waiting for you to complete the command. If you want to cancel a command you can simply hit “Esc” and RStudio will give you back the “&gt;” prompt. 2.6 Tip: Cancelling commands Cancelling a command isn’t only useful for killing incomplete commands: you can also use it to tell R to stop running code (for example if it’s taking much longer than you expect), or to get rid of the code you’re currently writing. When using R as a calculator, the order of operations is the same as you would have learned back in school. From highest to lowest precedence: Parentheses: (, ) Exponents: ^ or ** Divide: / Multiply: * Add: + Subtract: - 3 + 5 * 2 [1] 13 Use parentheses to group operations in order to force the order of evaluation if it differs from the default, or to make clear what you intend. (3 + 5) * 2 [1] 16 This can get unwieldy when not needed, but clarifies your intentions. Remember that others may later read your code. (3 + (5 * (2 ^ 2))) # hard to read 3 + 5 * 2 ^ 2 # clear, if you remember the rules 3 + 5 * (2 ^ 2) # if you forget some rules, this might help The text after each line of code is called a “comment”. Anything that follows after the hash (or octothorpe) symbol # is ignored by R when it executes code. Really small or large numbers get a scientific notation: 2/10000 [1] 2e-04 Which is shorthand for “multiplied by 10^XX”. So 2e-4 is shorthand for 2 * 10^(-4). You can write numbers in scientific notation too: 5e3 # Note the lack of minus here [1] 5000 2.7 Mathematical functions R has many built in mathematical functions. To call a function, we simply type its name, followed by open and closing parentheses. Anything we type inside the parentheses is called the function’s arguments: sum(1, 2, 3, 4, 5) [1] 15 sin(1) # trigonometry functions [1] 0.841471 log(1) # natural logarithm [1] 0 log10(10) # base-10 logarithm [1] 1 exp(0.5) # e^(1/2) [1] 1.648721 Don’t worry about trying to remember every function in R. You can simply look them up on Google, or if you can remember the start of the function’s name, use the tab completion in RStudio. This is one advantage that RStudio has over R on its own, it has auto-completion abilities that allow you to more easily look up functions, their arguments, and the values that they take. Typing a ? before the name of a command will open the help page for that command. As well as providing a detailed description of the command and how it works, scrolling to the bottom of the help page will usually show a collection of code examples which illustrate command usage. We’ll go through an example later. 2.8 Comparing things We can also do comparison in R: 1 == 1 # equality (note two equals signs, read as &quot;is equal to&quot;) [1] TRUE 1 != 2 # inequality (read as &quot;is not equal to&quot;) [1] TRUE 1 &lt; 2 # less than [1] TRUE 1 &lt;= 1 # less than or equal to [1] TRUE 1 &gt; 0 # greater than [1] TRUE 1 &gt;= -9 # greater than or equal to [1] TRUE 2.8 Tip: Comparing Numbers A word of warning about comparing numbers: you should never use == to compare two numbers unless they are integers (a data type which can specifically represent only whole numbers). Computers may only represent decimal numbers with a certain degree of precision, so two numbers which look the same when printed out by R, may actually have different underlying representations and therefore be different by a small margin of error (called Machine numeric tolerance). Instead you should use the all.equal function. Further reading: http://floating-point-gui.de/ 2.9 Variables and assignment We can store values in variables using the assignment operator &lt;-, like this: x &lt;- 5 Notice that assignment does not print a value. Instead, we stored it for later in something called a variable. x now contains the value 0.025: x [1] 5 More precisely, the stored value is a decimal approximation of this fraction called a floating point number. Look for the Environment tab in one of the panes of RStudio, and you will see that x and its value have appeared. Our variable x can be used in place of a number in any calculation that expects a number: log(x) [1] 1.609438 Notice also that variables can be reassigned: x &lt;- 100 x used to contain the value 0.025 and and now it has the value 100. Assignment values can contain the variable being assigned to: x &lt;- x + 1 #notice how RStudio updates its description of x on the top right tab y &lt;- x * 2 The right hand side of the assignment can be any valid R expression. The right hand side is fully evaluated before the assignment occurs. Variable names can contain letters, numbers, underscores and periods. They cannot start with a number nor contain spaces at all. Different people use different conventions for long variable names, these include periods.between.words underscores_between_words camelCaseToSeparateWords What you use is up to you, but be consistent. It is also possible to use the = operator for assignment: x = 1/40 But this is much less common among R users. The most important thing is to be consistent with the operator you use. There are occasionally places where it is less confusing to use &lt;- than =, and it is the most common symbol used in the community. So the recommendation is to use &lt;-. 2.9 Challenge 1 Which of the following are valid R variable names? min_height max.height _age .mass MaxLength min-length 2widths celsius2kelvin 2.9 Solution to challenge 1 The following can be used as R variables: min_height max.height MaxLength celsius2kelvin The following creates a hidden variable: .mass The following will not be able to be used to create a variable _age min-length 2widths 2.10 Vectorization One final thing to be aware of is that R is vectorized, meaning that variables and functions can have vectors as values. In contrast to physics and mathematics, a vector in R describes a set of values in a certain order of the same data type. For example 1:5 [1] 1 2 3 4 5 2 * (1:5) [1] 2 4 6 8 10 x &lt;- 1:5 2 * x [1] 2 4 6 8 10 y &lt;- c(1, 3, 5, 7, 9) y [1] 1 3 5 7 9 This is incredibly powerful; we will discuss this further in an upcoming lesson. 2.11 Managing your environment There are a few useful commands you can use to interact with the R session. ls will list all of the variables and functions stored in the global environment (your working R session): ls() [1] &quot;a_countries&quot; [2] &quot;another_coercion_vector&quot; [3] &quot;another_list&quot; [4] &quot;answer&quot; [5] &quot;asia_oceania&quot; [6] &quot;az.countries&quot; [7] &quot;can_mex&quot; [8] &quot;CATegories&quot; [9] &quot;cats&quot; [10] &quot;character_coerced_to_numeric&quot; [11] &quot;character_vector_example&quot; [12] &quot;coats&quot; [13] &quot;coercion_vector&quot; [14] &quot;dataStructures&quot; [15] &quot;dataTypes&quot; [16] &quot;desc&quot; [17] &quot;ds-cop-intro-to-r&quot; [18] &quot;factor_ordering_example&quot; [19] &quot;fix_fig_path&quot; [20] &quot;gap_wide&quot; [21] &quot;gapminder&quot; [22] &quot;gapminder_long&quot; [23] &quot;gapminder_wide&quot; [24] &quot;gdp_bycontinents&quot; [25] &quot;gdp_bycontinents_byyear&quot; [26] &quot;gdp_future_bycontinents_byyear_high_lifeExp&quot; [27] &quot;gdp_pop_bycontinents_byyear&quot; [28] &quot;gdp_pop_bycontinents_byyear_above25&quot; [29] &quot;knitr_fig_path&quot; [30] &quot;lifeExp_2countries_bycontinents&quot; [31] &quot;lifeExp_bycountry&quot; [32] &quot;lifeExp_plot&quot; [33] &quot;list_example&quot; [34] &quot;matrix_example&quot; [35] &quot;my_other_vector&quot; [36] &quot;my_vector&quot; [37] &quot;mydata&quot; [38] &quot;mySeries&quot; [39] &quot;numeric_coerced_to_logical&quot; [40] &quot;quiz_vector&quot; [41] &quot;romania&quot; [42] &quot;sequence_example&quot; [43] &quot;starts.with&quot; [44] &quot;x&quot; [45] &quot;y&quot; [46] &quot;year_country_gdp&quot; [47] &quot;year_country_gdp_euro&quot; [48] &quot;year_country_lifeExp_Africa&quot; 2.11 Tip: hidden objects Like in the shell, ls will hide any variables or functions starting with a “.” by default. To list all objects, type ls(all.names=TRUE) instead Note here that we didn’t give any arguments to ls, but we still needed to give the parentheses to tell R to call the function. If we type ls by itself, R will print out the source code for that function! ls function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE, pattern, sorted = TRUE) { if (!missing(name)) { pos &lt;- tryCatch(name, error = function(e) e) if (inherits(pos, &quot;error&quot;)) { name &lt;- substitute(name) if (!is.character(name)) name &lt;- deparse(name) warning(gettextf(&quot;%s converted to character string&quot;, sQuote(name)), domain = NA) pos &lt;- name } } all.names &lt;- .Internal(ls(envir, all.names, sorted)) if (!missing(pattern)) { if ((ll &lt;- length(grep(&quot;[&quot;, pattern, fixed = TRUE))) &amp;&amp; ll != length(grep(&quot;]&quot;, pattern, fixed = TRUE))) { if (pattern == &quot;[&quot;) { pattern &lt;- &quot;\\\\[&quot; warning(&quot;replaced regular expression pattern &#39;[&#39; by &#39;\\\\\\\\[&#39;&quot;) } else if (length(grep(&quot;[^\\\\\\\\]\\\\[&lt;-&quot;, pattern))) { pattern &lt;- sub(&quot;\\\\[&lt;-&quot;, &quot;\\\\\\\\\\\\[&lt;-&quot;, pattern) warning(&quot;replaced &#39;[&lt;-&#39; by &#39;\\\\\\\\[&lt;-&#39; in regular expression pattern&quot;) } } grep(pattern, all.names, value = TRUE) } else all.names } &lt;bytecode: 0x00000261360f9b00&gt; &lt;environment: namespace:base&gt; You can use rm to delete objects you no longer need: rm(x) If you have lots of things in your environment and want to delete all of them, you can pass the results of ls to the rm function: rm(list = ls()) 2.11 Tip: Warnings vs. Errors Pay attention when R does something unexpected! Errors, like above, are thrown when R cannot proceed with a calculation. Warnings on the other hand usually mean that the function has run, but it probably hasn’t worked as expected. In both cases, the message that R prints out usually give you clues how to fix a problem. 2.12 R Packages Think of packages like apps on your smart phone. Your phone can do a lot of things right out of the box, but you can get apps to make some existing functionality better (like a better timer), or allow you to do new and amazing things with your phone (like play Cwazy Cupcakes). Similarly, R comes with many functions built in, but it is possible to add functions to R by obtaining a package written by someone else. As of this writing, there are over 10,000 packages available on CRAN (the comprehensive R archive network). R and RStudio have functionality for managing packages: You can see what packages are installed by typing installed.packages() You can install packages by typing install.packages(\"packagename\"), where packagename is the package name, in quotes. You can update installed packages by typing update.packages() You can remove a package with remove.packages(\"packagename\") You can make a package available for use with library(packagename) 2.12 Challenge 2 What will be the value of each variable after each statement in the following program? mass &lt;- 47.5 age &lt;- 122 mass &lt;- mass * 2.3 age &lt;- age - 20 2.12 Solution to challenge 2 mass &lt;- 47.5 This will give a value of 47.5 for the variable mass age &lt;- 122 This will give a value of 122 for the variable age mass &lt;- mass * 2.3 This will multiply the existing value of 47.5 by 2.3 to give a new value of 109.25 to the variable mass. age &lt;- age - 20 This will subtract 20 from the existing value of 122 to give a new value of 102 to the variable age. 2.12 Challenge 3 Run the code from the previous challenge, and write a command to compare mass to age. Is mass larger than age? 2.12 Solution to challenge 3 One way of answering this question in R is to use the &gt; to set up the following: mass &gt; age [1] TRUE This should yield a boolean value of TRUE since 109.25 is greater than 102. 2.12 Challenge 4 Clean up your working environment by deleting the mass and age variables. 2.12 Solution to challenge 4 We can use the rm command to accomplish this task rm(age, mass) 2.12 Challenge 5 Install the following packages: ggplot2, plyr, gapminder 2.12 Solution to challenge 5 We can use the install.packages() command to install the required packages. install.packages(&quot;ggplot2&quot;) install.packages(&quot;plyr&quot;) install.packages(&quot;gapminder&quot;) "],
["seeking-help-in-r.html", "Chapter 3 Seeking Help in R 3.1 Reading Help files 3.1 Tip: Running Examples 3.1 Tip: Reading help files 3.2 Special Operators 3.3 Getting help on packages 3.4 When you kind of remember the function 3.5 When you have no idea where to begin 3.5 Challenge 1 3.5 Challenge 2 3.5 Solution to Challenge 2 3.5 Challenge 3 3.5 Solution to Challenge 3", " Chapter 3 Seeking Help in R 3.1 Reading Help files R, and every package, provide help files for functions. The general syntax to search for help on any function, “function_name”, from a specific function that is in a package loaded into your namespace (your interactive R session): ?function_name help(function_name) This will load up a help page in RStudio (or as plain text in R by itself). Each help page is broken down into sections: Description: An extended description of what the function does. Usage: The arguments of the function and their default values. Arguments: An explanation of the data each argument is expecting. Details: Any important details to be aware of. Value: The data the function returns. See Also: Any related functions you might find useful. Examples: Some examples for how to use the function. Different functions might have different sections, but these are the main ones you should be aware of. 3.1 Tip: Running Examples From within the function help page, you can highlight code in the Examples and hit Ctrl+Return to run it in RStudio console. This is gives you a quick way to get a feel for how a function works. 3.1 Tip: Reading help files One of the most daunting aspects of R is the large number of functions available. It would be prohibitive, if not impossible to remember the correct usage for every function you use. Luckily, the help files mean you don’t have to! 3.2 Special Operators To seek help on special operators, use quotes: ?&quot;&lt;-&quot; 3.3 Getting help on packages Many packages come with “vignettes”: tutorials and extended example documentation. Without any arguments, vignette() will list all vignettes for all installed packages; vignette(package=\"package-name\") will list all available vignettes for package-name, and vignette(\"vignette-name\") will open the specified vignette. If a package doesn’t have any vignettes, you can usually find help by typing help(\"package-name\"). 3.4 When you kind of remember the function If you’re not sure what package a function is in, or how it’s specifically spelled you can do a fuzzy search: ??function_name 3.5 When you have no idea where to begin If you don’t know what function or package you need to use CRAN Task Views is a specially maintained list of packages grouped into fields. This can be a good starting point. 3.5 Challenge 1 Look at the help for the sum function. What are two ways you can pass numbers into the function so the are added together: ?sum sum(1, 2, 3, 4, 5) x &lt;- c(1, 2, 3) sum(x) 3.5 Challenge 2 Look at the help for the paste function. You’ll need to use this later. What is the difference between the sep and collapse arguments? 3.5 Solution to Challenge 2 To look at the help for the paste() function, use: help(&quot;paste&quot;) ?paste The difference between sep and collapse is a little tricky. The paste function accepts any number of arguments, each of which can be a vector of any length. The sep argument specifies the string used between concatenated terms — by default, a space. The result is a vector as long as the longest argument supplied to paste. In contrast, collapse specifies that after concatenation the elements are collapsed together using the given separator, the result being a single string. e.g. paste(c(&quot;a&quot;,&quot;b&quot;), &quot;c&quot;) [1] &quot;a c&quot; &quot;b c&quot; paste(c(&quot;a&quot;,&quot;b&quot;), &quot;c&quot;, sep = &quot;,&quot;) [1] &quot;a,c&quot; &quot;b,c&quot; paste(c(&quot;a&quot;,&quot;b&quot;), &quot;c&quot;, collapse = &quot;|&quot;) [1] &quot;a c|b c&quot; paste(c(&quot;a&quot;,&quot;b&quot;), &quot;c&quot;, sep = &quot;,&quot;, collapse = &quot;|&quot;) [1] &quot;a,c|b,c&quot; (For more information, scroll to the bottom of the ?paste help page and look at the examples, or try example('paste').) 3.5 Challenge 3 Use help to find a function (and its associated parameters) that you could use to load data from a csv file in which columns are delimited with “ (tab) and the decimal point is a”.\" (period). This check for decimal separator is important, especially if you are working with international colleagues, because different countries have different conventions for the decimal point (i.e. comma vs period). hint: use ??csv to lookup csv related functions. 3.5 Solution to Challenge 3 The standard R function for reading tab-delimited files with a period decimal separator is read.delim(). You can also do this with read.table(file, sep=\"\\t\") (the period is the default decimal separator for read.table(), although you may have to change the comment.char argument as well if your data file contains hash (#) characters "],
["project-management-with-rstudio.html", "Chapter 4 Project Management With RStudio 4.1 Introduction 4.2 A possible solution 4.2 Challenge: Creating a self-contained project 4.3 Best practices for project organization 4.3.3 Tip: Good Enough Practices for Scientific Computing", " Chapter 4 Project Management With RStudio 4.1 Introduction The scientific process is naturally incremental, and many projects start life as random notes, some code, then a manuscript, and eventually everything is a bit mixed together. Managing your projects in a reproducible fashion doesn’t just make your science reproducible, it makes your life easier. — Vince Buffalo (@vsbuffalo) April 15, 2013 Most people tend to organize their projects like this: There are many reasons why we should ALWAYS avoid this: It is really hard to tell which version of your data is the original and which is the modified; It gets really messy because it mixes files with various extensions together; It probably takes you a lot of time to actually find things, and relate the correct figures to the exact code that has been used to generate it; A good project layout will ultimately make your life easier: It will help ensure the integrity of your data; It makes it simpler to share your code with someone else (a lab-mate, collaborator, or supervisor); It allows you to easily upload your code with your manuscript submission; It makes it easier to pick the project back up after a break. 4.2 A possible solution Fortunately, there are tools and packages which can help you manage your work effectively. One of the most powerful and useful aspects of RStudio is its project management functionality. We’ll be using this today to create a self-contained, reproducible project. 4.2 Challenge: Creating a self-contained project We’re going to create a new project in RStudio: First, we are going to download the course content. Download the zipfile from: https://bit.ly/2oJNI50 and save it somewhere where you can find it (e.g., your desktop), then unzip it. You should have a folder called ds-cop-intro-to-r with a README.md file and a data folder. Click the “File” menu button, then “New Project”. Click “Existing Directory”. Browse to the folder we just extracted. Click the “Create Project” button. Now when we open this project with RStudio, all of our work on this project will be entirely self-contained in this directory. 4.3 Best practices for project organization Although there is no “best” way to lay out a project, there are some general principles to adhere to that will make project management easier: 4.3.1 Treat data as read only This is probably the most important goal of setting up a project. Data is typically time consuming and/or expensive to collect. Working with them interactively (e.g., in Excel) where they can be modified means you are never sure of where the data came from, or how it has been modified since collection. It is therefore a good idea to treat your data as “read-only”. 4.3.2 Data Cleaning In many cases your data will be “dirty”: it will need significant pre-processing to get into a format R (or any other programming language) will find useful. This task is sometimes called “data munging”. Storing these scripts in a separate folder, and creating a second “read-only” data folder to hold the “cleaned” data sets can prevent confusion between the two sets. 4.3.3 Treat generated output as disposable Anything generated by your scripts should be treated as disposable: it should all be able to be regenerated from your scripts. There are lots of different ways to manage this output. Having an output folder with different sub-directories for each separate analysis makes it easier later. Since many analyses are exploratory and don’t end up being used in the final project, and some of the analyses get shared between projects. 4.3.3 Tip: Good Enough Practices for Scientific Computing Good Enough Practices for Scientific Computing gives the following recommendations for project organization: Put each project in its own directory, which is named after the project. Put text documents associated with the project in the doc directory. Put raw data and metadata in the data directory, and files generated during cleanup and analysis in a results directory. Put source for the project’s scripts and programs in the src directory, and programs brought in from elsewhere or compiled locally in the bin directory. Name all files to reflect their content or function. 4.3.4 Separate function definition and application One of the more effective ways to work with R is to start by writing the code you want to run directly in an .R script, and then running the selected lines (either using the keyboard shortcuts in RStudio or clicking the “Run” button) in the interactive R console. When your project is in its early stages, the initial .R script file usually contains many lines of directly executed code. As it matures, reusable chunks get pulled into their own functions. It’s a good idea to separate these functions into two separate folders; one to store useful functions that you’ll reuse across analyses and projects, and one to store the analysis scripts. 4.3.5 Version Control It is important to use version control with projects. Go here for a good lesson which describes using Git with RStudio. "],
["data-structures.html", "Chapter 5 Data Structures 5.1 The readr package 5.2 Data Types 5.3 Vectors and Type Coercion 5.3 Discussion 1 5.3 Discussion 1 5.3 Challenge 1 5.3 Solution to Challenge 1 5.4 Data Frames 5.5 Factors 5.5 Challenge 2 5.5 Solution to Challenge 2 5.6 Lists 5.6 Challenge 3 5.6 Solution to Challenge 3 5.7 Matrices 5.7 Challenge 4 5.7 Solution to Challenge 4 5.7 Challenge 5 5.7 Solution to Challenge 5 5.7 Challenge 6 5.7 Solution to Challenge 6 5.7 Challenge 7 5.7 Solution to Challenge 7", " Chapter 5 Data Structures One of R’s most powerful features is its ability to deal with tabular data - such as you may already have in a spreadsheet or a CSV file. Let’s start by looking at a toy dataset in your data/ directory, called feline-data.csv: The contents of the new file, feline-data.csv: coat,weight,likes_string calico,2.1,1 black,5.0,0 tabby,3.2,1 5.1 The readr package To read the data into R, we are going to use our first package, called readr. readr is part of a suite of packages called the “tidyverse” which were designed to work nicely together and to ease many common data operations. The first time you use a package, you will need to install it (like installing an app on your phone from the app store). Additionally, it is a good idea to periodically check for updates to that package: install.packages(&quot;readr&quot;) Everytime we want to use that package, you must load into your R sessions, by using the library function: library(readr) We can load this into R via the following: cats &lt;- read_csv(file = &quot;data/feline-data.csv&quot;) Parsed with column specification: cols( coat = col_character(), weight = col_double(), likes_string = col_double() ) cats # A tibble: 3 x 3 coat weight likes_string &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 calico 2.1 1 2 black 5 0 3 tabby 3.2 1 The read_csv function is used for reading in tabular data stored in a text file where the columns of data are separated by punctuation characters such as CSV files (csv = comma-separated values). There is a base version of this called read.csv, but the readr version (read_csv) is a bit more user-friendly, and uses more sensible defaults. Tabs and commas are the most common punctuation characters used to separate or delimit data points in csv files. We can begin exploring our dataset right away, first by looking at the whole thing: cats # A tibble: 3 x 3 coat weight likes_string &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 calico 2.1 1 2 black 5 0 3 tabby 3.2 1 And pulling out individual columns by specifying them using the $ operator: cats$weight [1] 2.1 5.0 3.2 cats$coat [1] &quot;calico&quot; &quot;black&quot; &quot;tabby&quot; We can do other operations on the columns: ## Say we discovered that the scale weighs two Kg light: cats$weight + 2 [1] 4.1 7.0 5.2 paste(&quot;My&quot;, cats$coat, &quot;cat weighs&quot;, cats$weight + 2) [1] &quot;My calico cat weighs 4.1&quot; &quot;My black cat weighs 7&quot; [3] &quot;My tabby cat weighs 5.2&quot; But what about cats$weight + cats$coat Error in cats$weight + cats$coat: non-numeric argument to binary operator Understanding what happened here is key to successfully analyzing data in R. 5.2 Data Types If you guessed that the last command will return an error because 2.1 plus \"black\" is nonsense, you’re right - and you already have some intuition for an important concept in programming called data types. We can ask what type of data something is: typeof(cats$weight) [1] &quot;double&quot; There are 4 main types: double (decimal numbers), integer (counting numbers), logical (True/False), character (free text) typeof(3.14) [1] &quot;double&quot; typeof(1L) # The L suffix forces the number to be an integer, since by default R uses double (decimal) numbers [1] &quot;integer&quot; typeof(TRUE) [1] &quot;logical&quot; typeof(&#39;banana&#39;) [1] &quot;character&quot; No matter how complicated our analyses become, all data in R is interpreted as one of these basic data types. This strictness has some really important consequences. The table that R loaded our cats data into is something called a data.frame, and it is our first example of something called a data structure - that is, a structure which R knows how to build out of the basic data types. We can see that it is a data.frame by calling the class function on it: class(cats) [1] &quot;spec_tbl_df&quot; &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; 5.3 Vectors and Type Coercion To better understand this behavior, let’s meet another of the data structures: the vector. If we are creating vectors on our own, we will normally use the c (combine) function: my_vector &lt;- c(1, 3, 5 ,7 ,9) my_vector [1] 1 3 5 7 9 A vector in R is essentially an ordered list of things, with the special condition that everything in the vector must be the same basic data type. class(my_vector) [1] &quot;numeric&quot; This command indicates the basic data type found in this vector - in this case numeric. We can use the logical operators that we learned earlier with vectors: my_vector &gt; 4 [1] FALSE FALSE TRUE TRUE TRUE Vectors can be any data type that we’ve already learned about. Let’s make a character vector: my_other_vector &lt;- c(&quot;Harry&quot;, &quot;Ron&quot;, &quot;Hermione&quot;, &quot;Ginny&quot;) my_other_vector [1] &quot;Harry&quot; &quot;Ron&quot; &quot;Hermione&quot; &quot;Ginny&quot; class(my_other_vector) [1] &quot;character&quot; my_other_vector == &quot;Harry&quot; [1] TRUE FALSE FALSE FALSE If we similarly do class(cats$weight) [1] &quot;numeric&quot; we see that cats$weight is a vector, too - the columns of data we load into R data.frames are all vectors, and that’s the root of why R forces everything in a column to be the same basic data type. 5.3 Discussion 1 Why is R so opinionated about what we put in our columns of data? How does this help us? 5.3 Discussion 1 By keeping everything in a column the same, we allow ourselves to make simple assumptions about our data; if you can interpret one entry in the column as a number, then you can interpret all of them as numbers, so we don’t have to check every time. This consistency is what people mean when they talk about clean data; in the long run, strict consistency goes a long way to making our lives easier in R. Given what we’ve learned so far, what do you think the following will produce? quiz_vector &lt;- c(2,6,&#39;3&#39;) This is something called type coercion, and it is the source of many surprises and the reason why we need to be aware of the basic data types and how R will interpret them. When R encounters a mix of types (here numeric and character) to be combined into a single vector, it will force them all to be the same type. Consider: coercion_vector &lt;- c(&#39;a&#39;, TRUE) coercion_vector [1] &quot;a&quot; &quot;TRUE&quot; another_coercion_vector &lt;- c(0, TRUE) another_coercion_vector [1] 0 1 The coercion rules go: logical -&gt; integer -&gt; numeric -&gt; complex -&gt; character, where -&gt; can be read as are transformed into. You can try to force coercion against this flow using the as. functions: character_vector_example &lt;- c(&#39;0&#39;,&#39;2&#39;,&#39;4&#39;) character_vector_example [1] &quot;0&quot; &quot;2&quot; &quot;4&quot; character_coerced_to_numeric &lt;- as.numeric(character_vector_example) character_coerced_to_numeric [1] 0 2 4 numeric_coerced_to_logical &lt;- as.logical(character_coerced_to_numeric) numeric_coerced_to_logical [1] FALSE TRUE TRUE As you can see, some surprising things can happen when R forces one basic data type into another! Nitty-gritty of type coercion aside, the point is: if your data doesn’t look like what you thought it was going to look like, type coercion may well be to blame; make sure everything is the same type in your vectors and your columns of data.frames, or you will get nasty surprises! But coercion can also be very useful! For example, in our cats data likes_string is numeric, but we know that the 1s and 0s actually represent TRUE and FALSE (a common way of representing them). We should use the logical datatype here, which has two states: TRUE or FALSE, which is exactly what our data represents. We can ‘coerce’ this column to be logical by using the as.logical function: cats$likes_string [1] 1 0 1 cats$likes_string &lt;- as.logical(cats$likes_string) cats$likes_string [1] TRUE FALSE TRUE You can also make series of numbers: mySeries &lt;- 1:10 mySeries [1] 1 2 3 4 5 6 7 8 9 10 seq(10) [1] 1 2 3 4 5 6 7 8 9 10 seq(1,10, by=0.1) [1] 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 2.1 2.2 2.3 [15] 2.4 2.5 2.6 2.7 2.8 2.9 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 [29] 3.8 3.9 4.0 4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 4.9 5.0 5.1 [43] 5.2 5.3 5.4 5.5 5.6 5.7 5.8 5.9 6.0 6.1 6.2 6.3 6.4 6.5 [57] 6.6 6.7 6.8 6.9 7.0 7.1 7.2 7.3 7.4 7.5 7.6 7.7 7.8 7.9 [71] 8.0 8.1 8.2 8.3 8.4 8.5 8.6 8.7 8.8 8.9 9.0 9.1 9.2 9.3 [85] 9.4 9.5 9.6 9.7 9.8 9.9 10.0 We can ask a few questions about vectors: sequence_example &lt;- seq(10) sequence_example [1] 1 2 3 4 5 6 7 8 9 10 length(sequence_example) [1] 10 class(sequence_example) [1] &quot;integer&quot; typeof(sequence_example) [1] &quot;integer&quot; 5.3 Challenge 1 Start by making a vector with the numbers 1 through 26. Multiply the vector by 2, and give the resulting vector names A through Z (hint: there is a built in vector called LETTERS) 5.3 Solution to Challenge 1 x &lt;- 1:26 x &lt;- x * 2 names(x) &lt;- LETTERS 5.4 Data Frames We said that columns in data.frames were vectors: str(cats$weight) num [1:3] 2.1 5 3.2 str(cats$likes_string) logi [1:3] TRUE FALSE TRUE These make sense. But what about str(cats$coat) chr [1:3] &quot;calico&quot; &quot;black&quot; &quot;tabby&quot; 5.5 Factors Another important data structure is called a factor. Factors usually look like character data, but are typically used to represent categorical information that have a defined set of values. For example, let’s make a vector of strings labelling cat colorations for all the cats in our study: coats &lt;- c(&#39;tabby&#39;, &#39;tortoiseshell&#39;, &#39;tortoiseshell&#39;, &#39;black&#39;, &#39;tabby&#39;) coats [1] &quot;tabby&quot; &quot;tortoiseshell&quot; &quot;tortoiseshell&quot; &quot;black&quot; [5] &quot;tabby&quot; We can turn a vector into a factor like so: CATegories &lt;- factor(coats) class(CATegories) [1] &quot;factor&quot; CATegories [1] tabby tortoiseshell tortoiseshell black tabby Levels: black tabby tortoiseshell Now R has noticed that there are three possible categories in our data - but it also did something surprising; instead of printing out the strings we gave it, we got a bunch of numbers instead. R has replaced our human-readable categories with numbered indices under the hood, this is necessary as many statistical calculations utilise such numerical representations for categorical data: typeof(coats) [1] &quot;character&quot; typeof(CATegories) [1] &quot;integer&quot; 5.5 Challenge 2 Is there a factor in our cats data.frame? what is its name? Try using ?read.csv to figure out how to keep text columns as character vectors instead of factors; then write a command or two to show that the factor in cats is actually a character vector when loaded in this way. 5.5 Solution to Challenge 2 One solution is use the argument stringAsFactors: cats &lt;- read.csv(file=&quot;data/feline-data.csv&quot;, stringsAsFactors=FALSE) str(cats$coat) Another solution is use the argument colClasses that allow finer control. cats &lt;- read.csv(file=&quot;data/feline-data.csv&quot;, colClasses=c(NA, NA, &quot;character&quot;)) str(cats$coat) Note: new students find the help files difficult to understand; make sure to let them know that this is typical, and encourage them to take their best guess based on semantic meaning, even if they aren’t sure. In modelling functions, it’s important to know what the baseline levels are. This is assumed to be the first factor, but by default factors are labelled in alphabetical order. You can change this by specifying the levels: mydata &lt;- c(&quot;case&quot;, &quot;control&quot;, &quot;control&quot;, &quot;case&quot;) factor_ordering_example &lt;- factor(mydata, levels = c(&quot;control&quot;, &quot;case&quot;)) str(factor_ordering_example) Factor w/ 2 levels &quot;control&quot;,&quot;case&quot;: 2 1 1 2 In this case, we’ve explicitly told R that “control” should be represented by 1, and “case” by 2. This designation can be very important for interpreting the results of statistical models! 5.6 Lists Another data structure you’ll want in your bag of tricks is the list. A list is simpler in some ways than the other types, because you can put anything you want in it: list_example &lt;- list(1, &quot;a&quot;, TRUE, 1+4i) list_example [[1]] [1] 1 [[2]] [1] &quot;a&quot; [[3]] [1] TRUE [[4]] [1] 1+4i another_list &lt;- list(title = &quot;Numbers&quot;, numbers = 1:10, data = TRUE ) another_list $title [1] &quot;Numbers&quot; $numbers [1] 1 2 3 4 5 6 7 8 9 10 $data [1] TRUE We can now understand something a bit surprising in our data.frame; what happens if we run: typeof(cats) [1] &quot;list&quot; We see that data.frames look like lists ‘under the hood’ - this is because a data.frame is really a list of vectors and factors, as they have to be - in order to hold those columns that are a mix of vectors and factors, the data.frame needs something a bit more flexible than a vector to put all the columns together into a familiar table. In other words, a data.frame is a special list in which all the vectors must have the same length. In our cats example, we have a character, a double and a logical variable. As we have seen already, each column of data.frame is a vector. cats$coat [1] &quot;calico&quot; &quot;black&quot; &quot;tabby&quot; cats[,1] # A tibble: 3 x 1 coat &lt;chr&gt; 1 calico 2 black 3 tabby typeof(cats[,1]) [1] &quot;list&quot; str(cats[,1]) Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 3 obs. of 1 variable: $ coat: chr &quot;calico&quot; &quot;black&quot; &quot;tabby&quot; Each row is an observation of different variables, itself a data.frame, and thus can be composed of elements of different types. cats[1,] # A tibble: 1 x 3 coat weight likes_string &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; 1 calico 2.1 TRUE typeof(cats[1,]) [1] &quot;list&quot; str(cats[1,]) Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 1 obs. of 3 variables: $ coat : chr &quot;calico&quot; $ weight : num 2.1 $ likes_string: logi TRUE 5.6 Challenge 3 There are several subtly different ways to call variables, observations and elements from data.frames: cats[1] cats[[1]] cats$coat cats[\"coat\"] cats[1, 1] cats[, 1] cats[1, ] Try out these examples and explain what is returned by each one. Hint: Use the function typeof() to examine what is returned in each case. 5.6 Solution to Challenge 3 cats[1] # A tibble: 3 x 1 coat &lt;chr&gt; 1 calico 2 black 3 tabby We can think of a data frame as a list of vectors. The single brace [1] returns the first slice of the list, as another list. In this case it is the first column of the data frame. cats[[1]] [1] &quot;calico&quot; &quot;black&quot; &quot;tabby&quot; The double brace [[1]] returns the contents of the list item. In this case it is the contents of the first column, a vector of type factor. cats$coat [1] &quot;calico&quot; &quot;black&quot; &quot;tabby&quot; This example uses the $ character to address items by name. coat is the first column of the data frame, again a vector of type factor. cats[&quot;coat&quot;] # A tibble: 3 x 1 coat &lt;chr&gt; 1 calico 2 black 3 tabby Here we are using a single brace [\"coat\"] replacing the index number with the column name. Like example 1, the returned object is a list. cats[1, 1] # A tibble: 1 x 1 coat &lt;chr&gt; 1 calico This example uses a single brace, but this time we provide row and column coordinates. The returned object is the value in row 1, column 1. The object is an integer but because it is part of a vector of type factor, R displays the label “calico” associated with the integer value. cats[, 1] # A tibble: 3 x 1 coat &lt;chr&gt; 1 calico 2 black 3 tabby Like the previous example we use single braces and provide row and column coordinates. The row coordinate is not specified, R interprets this missing value as all the elements in this column vector. cats[1, ] # A tibble: 1 x 3 coat weight likes_string &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; 1 calico 2.1 TRUE Again we use the single brace with row and column coordinates. The column coordinate is not specified. The return value is a list containing all the values in the first row. 5.7 Matrices Last but not least is the matrix. We can declare a matrix full of zeros: matrix_example &lt;- matrix(0, ncol=6, nrow=3) matrix_example [,1] [,2] [,3] [,4] [,5] [,6] [1,] 0 0 0 0 0 0 [2,] 0 0 0 0 0 0 [3,] 0 0 0 0 0 0 And similar to other data structures, we can ask things about our matrix: class(matrix_example) [1] &quot;matrix&quot; typeof(matrix_example) [1] &quot;double&quot; str(matrix_example) num [1:3, 1:6] 0 0 0 0 0 0 0 0 0 0 ... dim(matrix_example) [1] 3 6 nrow(matrix_example) [1] 3 ncol(matrix_example) [1] 6 5.7 Challenge 4 What do you think will be the result of length(matrix_example)? Try it. Were you right? Why / why not? 5.7 Solution to Challenge 4 What do you think will be the result of length(matrix_example)? matrix_example &lt;- matrix(0, ncol=6, nrow=3) length(matrix_example) [1] 18 Because a matrix is a vector with added dimension attributes, length gives you the total number of elements in the matrix. 5.7 Challenge 5 Make another matrix, this time containing the numbers 1:50, with 5 columns and 10 rows. Did the matrix function fill your matrix by column, or by row, as its default behaviour? See if you can figure out how to change this. (hint: read the documentation for matrix!) 5.7 Solution to Challenge 5 Make another matrix, this time containing the numbers 1:50, with 5 columns and 10 rows. Did the matrix function fill your matrix by column, or by row, as its default behaviour? See if you can figure out how to change this. (hint: read the documentation for matrix!) x &lt;- matrix(1:50, ncol=5, nrow=10) x &lt;- matrix(1:50, ncol=5, nrow=10, byrow = TRUE) # to fill by row 5.7 Challenge 6 Create a list of length two containing a character vector for each of the sections in this part of the workshop: Data types Data structures Populate each character vector with the names of the data types and data structures we’ve seen so far. 5.7 Solution to Challenge 6 dataTypes &lt;- c(&#39;double&#39;, &#39;complex&#39;, &#39;integer&#39;, &#39;character&#39;, &#39;logical&#39;) dataStructures &lt;- c(&#39;data.frame&#39;, &#39;vector&#39;, &#39;factor&#39;, &#39;list&#39;, &#39;matrix&#39;) answer &lt;- list(dataTypes, dataStructures) Note: it’s nice to make a list in big writing on the board or taped to the wall listing all of these types and structures - leave it up for the rest of the workshop to remind people of the importance of these basics. 5.7 Challenge 7 Consider the R output of the matrix below: [,1] [,2] [1,] 4 1 [2,] 9 5 [3,] 10 7 What was the correct command used to write this matrix? Examine each command and try to figure out the correct one before typing them. Think about what matrices the other commands will produce. matrix(c(4, 1, 9, 5, 10, 7), nrow = 3) matrix(c(4, 9, 10, 1, 5, 7), ncol = 2, byrow = TRUE) matrix(c(4, 9, 10, 1, 5, 7), nrow = 2) matrix(c(4, 1, 9, 5, 10, 7), ncol = 2, byrow = TRUE) 5.7 Solution to Challenge 7 Consider the R output of the matrix below: [,1] [,2] [1,] 4 1 [2,] 9 5 [3,] 10 7 What was the correct command used to write this matrix? Examine each command and try to figure out the correct one before typing them. Think about what matrices the other commands will produce. matrix(c(4, 1, 9, 5, 10, 7), ncol = 2, byrow = TRUE) "],
["exploring-data-frames.html", "Chapter 6 Exploring Data Frames 6.1 Adding columns and rows in data frames 6.2 Factors 6.3 Realistic example 6.3 Challenge 1 6.3 Miscellaneous Tips 6.3 Challenge 2 6.3 Solution to Challenge 2 6.3 Challenge 3 6.3 Solution to Challenge 3 6.4 Basic subsetting 6.4.1 Challenge 4 6.4.1 Challenge 5", " Chapter 6 Exploring Data Frames At this point, you’ve seen it all: in the last lesson, we toured all the basic data types and data structures in R. Everything you do will be a manipulation of those tools. But most of the time, the star of the show is the data frame—the table that we created by loading information from a csv file. In this lesson, we’ll learn a few more things about working with data frames. 6.1 Adding columns and rows in data frames We already learned that the columns of a data frame are vectors, so that our data are consistent in type throughout the columns. As such, if we want to add a new column, we can start by making a new vector: library(readr) cats &lt;- read_csv(&quot;data/feline-data.csv&quot;) Parsed with column specification: cols( coat = col_character(), weight = col_double(), likes_string = col_double() ) We can find the size of our data with a few handy functions: nrow(cats) [1] 3 ncol(cats) [1] 3 dim(cats) [1] 3 3 names(cats) [1] &quot;coat&quot; &quot;weight&quot; &quot;likes_string&quot; str(cats) Classes &#39;spec_tbl_df&#39;, &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 3 obs. of 3 variables: $ coat : chr &quot;calico&quot; &quot;black&quot; &quot;tabby&quot; $ weight : num 2.1 5 3.2 $ likes_string: num 1 0 1 - attr(*, &quot;spec&quot;)= .. cols( .. coat = col_character(), .. weight = col_double(), .. likes_string = col_double() .. ) A way to get a nice overall view of a data frame is to use the summary function. This function can be used on various objects in R. For data frames, summary yields a numeric, tabular, or descriptive summary of each column. Factor columns are summarized by the number of items in each level, numeric or integer columns by the descriptive statistics (quartiles and mean), and character columns by its length, class, and mode. summary(cats) coat weight likes_string Length:3 Min. :2.100 Min. :0.0000 Class :character 1st Qu.:2.650 1st Qu.:0.5000 Mode :character Median :3.200 Median :1.0000 Mean :3.433 Mean :0.6667 3rd Qu.:4.100 3rd Qu.:1.0000 Max. :5.000 Max. :1.0000 A really nice feature of RStudio is that it allows us to view our data in a very readable and familiar way. Go ahead and click on the name of the cats data frame in the environment pane. Note that this is a read-only view, it’s not editable (Which is a good thing!) 6.2 Factors Remember we can convert a character to a factor: cats$coat &lt;- factor(cats$coat) Now if we run summary on cats again, it will look a little different: summary(cats) coat weight likes_string black :1 Min. :2.100 Min. :0.0000 calico:1 1st Qu.:2.650 1st Qu.:0.5000 tabby :1 Median :3.200 Median :1.0000 Mean :3.433 Mean :0.6667 3rd Qu.:4.100 3rd Qu.:1.0000 Max. :5.000 Max. :1.0000 str(cats) Classes &#39;spec_tbl_df&#39;, &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 3 obs. of 3 variables: $ coat : Factor w/ 3 levels &quot;black&quot;,&quot;calico&quot;,..: 2 1 3 $ weight : num 2.1 5 3.2 $ likes_string: num 1 0 1 - attr(*, &quot;spec&quot;)= .. cols( .. coat = col_character(), .. weight = col_double(), .. likes_string = col_double() .. ) For an object containing the data type factor, each different value represents what is called a level. In our case, the factor “coat” has 3 levels: “black”, “calico”, and “tabby”. 6.3 Realistic example So far, you have seen the basics of manipulating data frames with our cat data; now let’s use those skills to digest a more realistic dataset. Let’s read in the gapminder dataset that we downloaded previously: 6.3 Challenge 1 Read in the gapminder dataset using read_csv and assign it to a data frame called gapminder: gapminder &lt;- read_csv(&quot;data/gapminder_data.csv&quot;) Parsed with column specification: cols( country = col_character(), year = col_double(), pop = col_double(), continent = col_character(), lifeExp = col_double(), gdpPercap = col_double() ) Then tell me how many rows and columns gapminder has: str(gapminder) Classes &#39;spec_tbl_df&#39;, &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 1704 obs. of 6 variables: $ country : chr &quot;Afghanistan&quot; &quot;Afghanistan&quot; &quot;Afghanistan&quot; &quot;Afghanistan&quot; ... $ year : num 1952 1957 1962 1967 1972 ... $ pop : num 8425333 9240934 10267083 11537966 13079460 ... $ continent: chr &quot;Asia&quot; &quot;Asia&quot; &quot;Asia&quot; &quot;Asia&quot; ... $ lifeExp : num 28.8 30.3 32 34 36.1 ... $ gdpPercap: num 779 821 853 836 740 ... - attr(*, &quot;spec&quot;)= .. cols( .. country = col_character(), .. year = col_double(), .. pop = col_double(), .. continent = col_character(), .. lifeExp = col_double(), .. gdpPercap = col_double() .. ) nrow(gapminder) [1] 1704 ncol(gapminder) [1] 6 And tell me what kind of data is in the pop and continent columns Let’s investigate gapminder a bit; the first thing we should always do is check out what the data looks like with str: str(gapminder) Classes &#39;spec_tbl_df&#39;, &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 1704 obs. of 6 variables: $ country : chr &quot;Afghanistan&quot; &quot;Afghanistan&quot; &quot;Afghanistan&quot; &quot;Afghanistan&quot; ... $ year : num 1952 1957 1962 1967 1972 ... $ pop : num 8425333 9240934 10267083 11537966 13079460 ... $ continent: chr &quot;Asia&quot; &quot;Asia&quot; &quot;Asia&quot; &quot;Asia&quot; ... $ lifeExp : num 28.8 30.3 32 34 36.1 ... $ gdpPercap: num 779 821 853 836 740 ... - attr(*, &quot;spec&quot;)= .. cols( .. country = col_character(), .. year = col_double(), .. pop = col_double(), .. continent = col_character(), .. lifeExp = col_double(), .. gdpPercap = col_double() .. ) summary(gapminder$country) Length Class Mode 1704 character character 6.3 Miscellaneous Tips Files can also be downloaded directly from the Internet into a local folder of your choice onto your computer using the download.file function. The read.csv function can then be executed to read the downloaded file from the download location, for example, download.file(&quot;https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_data.csv&quot;, destfile = &quot;data/gapminder_data.csv&quot;) gapminder &lt;- read_csv(&quot;data/gapminder_data.csv&quot;) Alternatively, you can also read in files directly into R from the Internet by replacing the file paths with a web address in read.csv. One should note that in doing this no local copy of the csv file is first saved onto your computer. For example, gapminder &lt;- read_csv(&quot;https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_data.csv&quot;) You can read directly from excel spreadsheets without converting them to plain text first by using the readxl package. We’ll also likely want to know what the titles of all the columns are, so we can ask for them later: names(gapminder) [1] &quot;country&quot; &quot;year&quot; &quot;pop&quot; &quot;continent&quot; &quot;lifeExp&quot; &quot;gdpPercap&quot; At this stage, it’s important to ask ourselves if the structure R is reporting matches our intuition or expectations; do the basic data types reported for each column make sense? If not, we need to sort any problems out now before they turn into bad surprises down the road, using what we’ve learned about how R interprets data, and the importance of strict consistency in how we record our data. Once we’re happy that the data types and structures seem reasonable, it’s time to start digging into our data proper. Check out the first few lines: head(gapminder) # A tibble: 6 x 6 country year pop continent lifeExp gdpPercap &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Afghanistan 1952 8425333 Asia 28.8 779. 2 Afghanistan 1957 9240934 Asia 30.3 821. 3 Afghanistan 1962 10267083 Asia 32.0 853. 4 Afghanistan 1967 11537966 Asia 34.0 836. 5 Afghanistan 1972 13079460 Asia 36.1 740. 6 Afghanistan 1977 14880372 Asia 38.4 786. 6.3 Challenge 2 It’s good practice to also check the last few lines of your data and some in the middle. How would you do this? Searching for ones specifically in the middle isn’t too hard but we could simply ask for a few lines at random. How would you code this? 6.3 Solution to Challenge 2 To check the last few lines it’s relatively simple as R already has a function for this: tail(gapminder) tail(gapminder, n = 15) What about a few arbitrary rows just for sanity (or insanity depending on your view)? ## Tip: There are several ways to achieve this. The solution here presents one form of using nested functions, i.e. a function passed as an argument to another function. This might sound like a new concept, but you are already using it! Remember my_dataframe[rows, cols] will print to screen your data frame with the number of rows and columns you asked for (although you might have asked for a range or named columns for example). How would you get the last row if you don’t know how many rows your data frame has? R has a function for this. What about getting a (pseudorandom) sample? R also has a function for this. ~~ gapminder[sample(nrow(gapminder), 5), ] ~~ Another very helpful function for looking at your data is the unique function, to see the unique values in a particular column: unique(gapminder$continent) [1] &quot;Asia&quot; &quot;Europe&quot; &quot;Africa&quot; &quot;Americas&quot; &quot;Oceania&quot; To make sure our analysis is reproducible, we should put the code into a script file so we can come back to it later. 6.3 Challenge 3 Go to file -&gt; new file -&gt; R script, and write an R script to load in the gapminder dataset. Put it in the scripts/ directory. Run the script using the source function, using the file path as its argument (or by pressing the “source” button in RStudio). 6.3 Solution to Challenge 3 The source function can be used to use a script within a script. Assume you would like to load the same type of file over and over again and therefore you need to specify the arguments to fit the needs of your file. Instead of writing the necessary argument again and again you could just write it once and save it as a script. Then, you can use source(\"Your_Script_containing_the_load_function\") in a new script to use the function of that script without writing everything again. Check out ?source to find out more. download.file(&quot;https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_data.csv&quot;, destfile = &quot;data/gapminder_data.csv&quot;) gapminder &lt;- read.csv(file = &quot;data/gapminder_data.csv&quot;) To run the script and load the data into the gapminder variable: source(file = &quot;scripts/load-gapminder.R&quot;) 6.4 Basic subsetting Data frames are two dimensions - rows and columns. We can access these using a specific notation with square brackets. my_data_frame[rows, columns] 6.4.1 Selecting rows We can select rows using the square brackets like so: gapminder[1, ] # A tibble: 1 x 6 country year pop continent lifeExp gdpPercap &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Afghanistan 1952 8425333 Asia 28.8 779. gapminder[100:110, ] # A tibble: 11 x 6 country year pop continent lifeExp gdpPercap &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Bangladesh 1967 62821884 Asia 43.5 721. 2 Bangladesh 1972 70759295 Asia 45.3 630. 3 Bangladesh 1977 80428306 Asia 46.9 660. 4 Bangladesh 1982 93074406 Asia 50.0 677. 5 Bangladesh 1987 103764241 Asia 52.8 752. 6 Bangladesh 1992 113704579 Asia 56.0 838. 7 Bangladesh 1997 123315288 Asia 59.4 973. 8 Bangladesh 2002 135656790 Asia 62.0 1136. 9 Bangladesh 2007 150448339 Asia 64.1 1391. 10 Belgium 1952 8730405 Europe 68 8343. 11 Belgium 1957 8989111 Europe 69.2 9715. gapminder[c(1, 3, 5, 7, 9), ] # A tibble: 5 x 6 country year pop continent lifeExp gdpPercap &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Afghanistan 1952 8425333 Asia 28.8 779. 2 Afghanistan 1962 10267083 Asia 32.0 853. 3 Afghanistan 1972 13079460 Asia 36.1 740. 4 Afghanistan 1982 12881816 Asia 39.9 978. 5 Afghanistan 1992 16317921 Asia 41.7 649. It’s unlikely that you’ll often do this directly though, you’ll usually want to use some criteria. Say we just wanted the rows from Asia: romania &lt;- gapminder[gapminder$continent == &quot;Asia&quot;, ] romania # A tibble: 396 x 6 country year pop continent lifeExp gdpPercap &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Afghanistan 1952 8425333 Asia 28.8 779. 2 Afghanistan 1957 9240934 Asia 30.3 821. 3 Afghanistan 1962 10267083 Asia 32.0 853. 4 Afghanistan 1967 11537966 Asia 34.0 836. 5 Afghanistan 1972 13079460 Asia 36.1 740. 6 Afghanistan 1977 14880372 Asia 38.4 786. 7 Afghanistan 1982 12881816 Asia 39.9 978. 8 Afghanistan 1987 13867957 Asia 40.8 852. 9 Afghanistan 1992 16317921 Asia 41.7 649. 10 Afghanistan 1997 22227415 Asia 41.8 635. # ... with 386 more rows This works because subsetting can take either numerical positions like we showed above, OR a vector of TRUE and FALSE, returning the rows that are TRUE. gapminder$contintent == \"Asia\" generates a vector of TRUE and FALSE values: gapminder$continent == &quot;Asia&quot; [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE [12] TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE [23] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE [34] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE [45] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE [56] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE [67] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE [78] FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE TRUE TRUE [89] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE [100] TRUE [ reached getOption(&quot;max.print&quot;) -- omitted 1604 entries ] and inserting that vector into the first position of the square brackets gives us just the rows where the contintent column is \"Asia\". Another very useful operator in this context is the %in% operator - it can tell you if a value is one of a set of values: Say we wanted to select just Canada and Mexico: gapminder$country %in% c(&quot;Canada&quot;, &quot;Mexico&quotreached getOption(&quot;max.print&quot;) -- omitted 1604 entries ] Now we can insert this into the first position of the square brackets: can_mex &lt;- gapminder$country %in% c(&quot;Canada&quot;, &quot;Mexico&quot;) gapminder[can_mex, ] # A tibble: 24 x 6 country year pop continent lifeExp gdpPercap &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Canada 1952 14785584 Americas 68.8 11367. 2 Canada 1957 17010154 Americas 70.0 12490. 3 Canada 1962 18985849 Americas 71.3 13462. 4 Canada 1967 20819767 Americas 72.1 16077. 5 Canada 1972 22284500 Americas 72.9 18971. 6 Canada 1977 23796400 Americas 74.2 22091. 7 Canada 1982 25201900 Americas 75.8 22899. 8 Canada 1987 26549700 Americas 76.9 26627. 9 Canada 1992 28523502 Americas 78.0 26343. 10 Canada 1997 30305843 Americas 78.6 28955. # ... with 14 more rows 6.4.1 Challenge 4 Select all the rows in gapminder with data from 1975 and earlier Solution to Challenge 4 gapminder[gapminder$year &lt;= 1975, ] # A tibble: 710 x 6 country year pop continent lifeExp gdpPercap &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Afghanistan 1952 8425333 Asia 28.8 779. 2 Afghanistan 1957 9240934 Asia 30.3 821. 3 Afghanistan 1962 10267083 Asia 32.0 853. 4 Afghanistan 1967 11537966 Asia 34.0 836. 5 Afghanistan 1972 13079460 Asia 36.1 740. 6 Albania 1952 1282697 Europe 55.2 1601. 7 Albania 1957 1476505 Europe 59.3 1942. 8 Albania 1962 1728137 Europe 64.8 2313. 9 Albania 1967 1984060 Europe 66.2 2760. 10 Albania 1972 2263554 Europe 67.7 3313. # ... with 700 more rows We saw previously how we can select a single column using the dollar sign $: gapminder$country [1] &quot;Afghanistan&quot; &quot;Afghanistan&quot; &quot;Afghanistan&quot; &quot;Afghanistan&quot; &quot;Afghanistan&quot; [6] &quot;Afghanistan&quot; &quot;Afghanistan&quot; &quot;Afghanistan&quot; &quot;Afghanistan&quot; &quot;Afghanistan&quot; [11] &quot;Afghanistan&quot; &quot;Afghanistan&quot; &quot;Albania&quot; &quot;Albania&quot; &quot;Albania&quot; [16] &quot;Albania&quot; &quot;Albania&quot; &quot;Albania&quot; &quot;Albania&quot; &quot;Albania&quot; [21] &quot;Albania&quot; &quot;Albania&quot; &quot;Albania&quot; &quot;Albania&quot; &quot;Algeria&quot; [26] &quot;Algeria&quot; &quot;Algeria&quot; &quot;Algeria&quot; &quot;Algeria&quot; &quot;Algeria&quot; [31] &quot;Algeria&quot; &quot;Algeria&quot; &quot;Algeria&quot; &quot;Algeria&quot; &quot;Algeria&quot; [36] &quot;Algeria&quot; &quot;Angola&quot; &quot;Angola&quot; &quot;Angola&quot; &quot;Angola&quot; [41] &quot;Angola&quot; &quot;Angola&quot; &quot;Angola&quot; &quot;Angola&quot; &quot;Angola&quot; [46] &quot;Angola&quot; &quot;Angola&quot; &quot;Angola&quot; &quot;Argentina&quot; &quot;Argentina&quot; [51] &quot;Argentina&quot; &quot;Argentina&quot; &quot;Argentina&quot; &quot;Argentina&quot; &quot;Argentina&quot; [56] &quot;Argentina&quot; &quot;Argentina&quot; &quot;Argentina&quot; &quot;Argentina&quot; &quot;Argentina&quot; [61] &quot;Australia&quot; &quot;Australia&quot; &quot;Australia&quot; &quot;Australia&quot; &quot;Australia&quot; [66] &quot;Australia&quot; &quot;Australia&quot; &quot;Australia&quot; &quot;Australia&quot; &quot;Australia&quot; [71] &quot;Australia&quot; &quot;Australia&quot; &quot;Austria&quot; &quot;Austria&quot; &quot;Austria&quot; [76] &quot;Austria&quot; &quot;Austria&quot; &quot;Austria&quot; &quot;Austria&quot; &quot;Austria&quot; [81] &quot;Austria&quot; &quot;Austria&quot; &quot;Austria&quot; &quot;Austria&quot; &quot;Bahrain&quot; [86] &quot;Bahrain&quot; &quot;Bahrain&quot; &quot;Bahrain&quot; &quot;Bahrain&quot; &quot;Bahrain&quot; [91] &quot;Bahrain&quot; &quot;Bahrain&quot; &quot;Bahrain&quot; &quot;Bahrain&quot; &quot;Bahrain&quot; [96] &quot;Bahrain&quot; &quot;Bangladesh&quot; &quot;Bangladesh&quot; &quot;Bangladesh&quot; &quot;Bangladesh&quot; [ reached getOption(&quot;max.print&quot;) -- omitted 1604 entries ] If we wanted to select a subset of columns, we can specify that in the second position using a character vector of column names: gapminder[ , c(&quot;country&quot;, &quot;year&quot;, &quot;lifeExp&quot;)] # A tibble: 1,704 x 3 country year lifeExp &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Afghanistan 1952 28.8 2 Afghanistan 1957 30.3 3 Afghanistan 1962 32.0 4 Afghanistan 1967 34.0 5 Afghanistan 1972 36.1 6 Afghanistan 1977 38.4 7 Afghanistan 1982 39.9 8 Afghanistan 1987 40.8 9 Afghanistan 1992 41.7 10 Afghanistan 1997 41.8 # ... with 1,694 more rows 6.4.1 Challenge 5 Select all the rows in gapminder with data from Canada, and just the columns year, pop, and gdpPercap Solution to Challenge 5 gapminder[gapminder$country == &quot;Canada&quot;, c(&quot;year&quot;, &quot;pop&quot;, &quot;gdpPercap&quot;)] # A tibble: 12 x 3 year pop gdpPercap &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1952 14785584 11367. 2 1957 17010154 12490. 3 1962 18985849 13462. 4 1967 20819767 16077. 5 1972 22284500 18971. 6 1977 23796400 22091. 7 1982 25201900 22899. 8 1987 26549700 26627. 9 1992 28523502 26343. 10 1997 30305843 28955. 11 2002 31902268 33329. 12 2007 33390141 36319. "],
["creating-publication-quality-graphics-with-ggplot2.html", "Chapter 7 Creating Publication-Quality Graphics with ggplot2 7 Challenge 1 7 Solution to challenge 1 7 Challenge 2 7 Solution to challenge 2 7.1 Layers 7.1 Tip: Setting an aesthetic to a value instead of a mapping 7.1 Challenge 3 7.1 Solution to challenge 3 7.2 Transformations and statistics 7.2 Tip Reminder: Setting an aesthetic to a value instead of a mapping 7.2 Challenge 4a 7.2 Solution to challenge 4a 7.2 Challenge 4b 7.2 Solution to challenge 4b 7.3 Multi-panel figures 7.3 Tip 7.4 Modifying text 7.4 Tip 7.5 Exporting the plot", " Chapter 7 Creating Publication-Quality Graphics with ggplot2 Plotting our data is one of the best ways to quickly explore it and the various relationships between variables. There are three main plotting systems in R, the base plotting system, the lattice package, and the ggplot2 package. Today we’ll be learning about the ggplot2 package, because it is the most effective for creating publication quality graphics. ggplot2 is built on the grammar of graphics, the idea that any plot can be expressed from the same set of components: a data set, a coordinate system, and a set of geometric objects or geoms–the visual representation of data points. The key to understanding ggplot2 is thinking about a figure in layers. This idea may be familiar to you if you have used image editing programs like Photoshop, Illustrator, or Inkscape. Let’s start off by loading our gapminder data: library(readr) gapminder &lt;- read_csv(&quot;data/gapminder_data.csv&quot;) Parsed with column specification: cols( country = col_character(), year = col_double(), pop = col_double(), continent = col_character(), lifeExp = col_double(), gdpPercap = col_double() ) gapminder # A tibble: 1,704 x 6 country year pop continent lifeExp gdpPercap &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Afghanistan 1952 8425333 Asia 28.8 779. 2 Afghanistan 1957 9240934 Asia 30.3 821. 3 Afghanistan 1962 10267083 Asia 32.0 853. 4 Afghanistan 1967 11537966 Asia 34.0 836. 5 Afghanistan 1972 13079460 Asia 36.1 740. 6 Afghanistan 1977 14880372 Asia 38.4 786. 7 Afghanistan 1982 12881816 Asia 39.9 978. 8 Afghanistan 1987 13867957 Asia 40.8 852. 9 Afghanistan 1992 16317921 Asia 41.7 649. 10 Afghanistan 1997 22227415 Asia 41.8 635. # ... with 1,694 more rows And jump right into in me making an example ggplot2 plot: # install.packages(&quot;ggplot2&quot;) library(&quot;ggplot2&quot;) ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point() So the first thing we do is call the ggplot function. This function lets R know that we’re creating a new plot, and any of the arguments we give the ggplot function are the global options for the plot: they apply to all layers on the plot. We’ve passed in two arguments to ggplot. First, we tell ggplot what data we want to show on our figure, in this example the gapminder data we read in earlier. For the second argument, we passed in the aes function, which tells ggplot how variables in the data map to aesthetic properties of the figure, in this case the x and y locations. Here we told ggplot we want to plot the “gdpPercap” column of the gapminder data frame on the x-axis, and the “lifeExp” column on the y-axis. Notice that we didn’t need to explicitly pass aes these columns (e.g. x = gapminder[, \"gdpPercap\"]), this is because ggplot is smart enough to know to look in the data for that column! By itself, the call to ggplot isn’t enough to draw a figure: ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) We need to tell ggplot how we want to visually represent the data, which we do by adding a new geom layer. In our example, we used geom_point, which tells ggplot we want to visually represent the relationship between x and y as a scatterplot of points: ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point() Recap: Every ggplot2 plot has three key components: (1) data, (2) set of aesthetic mappings between variables in the data and visual properties on the plot, and (3) at least one layer, created with a geom function. 7 Challenge 1 Modify the example so that the figure shows how life expectancy has changed over time: ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point() Hint: the gapminder dataset has a column called “year”, which should appear on the x-axis. 7 Solution to challenge 1 Here is one possible solution: ggplot(data = gapminder, mapping = aes(x = year, y = lifeExp)) + geom_point() 7 Challenge 2 In the previous examples and challenge we’ve used the aes function to tell the scatterplot geom about the x and y locations of each point. Another aesthetic property we can modify is the point colour. Modify the code from the previous challenge to colour the points by the “continent” column. What trends do you see in the data? Are they what you expected? 7 Solution to challenge 2 In the previous examples and challenge we’ve used the aes function to tell the scatterplot geom about the x and y locations of each point. Another aesthetic property we can modify is the point colour. Modify the code from the previous challenge to colour the points by the “continent” column. What trends do you see in the data? Are they what you expected? ggplot(data = gapminder, mapping = aes(x = year, y = lifeExp, colour = continent)) + geom_point() 7.1 Layers Using a scatterplot probably isn’t the best for visualizing change over time. Instead, let’s tell ggplot to visualize the data as a line plot: ggplot(data = gapminder, mapping = aes(x = year, y = lifeExp, colour = continent)) + geom_line() Instead of adding a geom_point layer, we’ve added a geom_line layer, however it looks like the lines are connecting the wrong points? We need to add the group aesthetic, which tells ggplot to draw a line for each country. ggplot(data = gapminder, mapping = aes(x = year, y = lifeExp, colour = continent, group = country)) + geom_line() What if we want to visualize both lines and points on the plot? We can simply add another layer to the plot: ggplot(data = gapminder, mapping = aes(x = year, y = lifeExp, colour = continent, group = country)) + geom_line() + geom_point() It’s important to note that each layer is drawn on top of the previous layer. In this example, the points have been drawn on top of the lines. Here’s a demonstration: ggplot(data = gapminder, mapping = aes(x = year, y = lifeExp, group = country)) + geom_line(mapping = aes(colour = continent)) + geom_point() In this example, the aesthetic mapping of colour has been moved from the global plot options in ggplot to the geom_line layer so it no longer applies to the points. Now we can clearly see that the points are drawn on top of the lines. 7.1 Tip: Setting an aesthetic to a value instead of a mapping So far, we’ve seen how to use an aesthetic (such as colour) as a mapping to a variable in the data. For example, when we use geom_line(mapping = aes(colour = continent)), ggplot will give a different colour to each continent. But what if we want to change the colour of all lines to blue? You may think that geom_line(mapping = aes(colour = \"blue\")) should work, but it doesn’t. Since we don’t want to create a mapping to a specific variable, we simply move the colour specification outside of the aes() function, like this: geom_line(colour = \"blue\"). ggplot(data = gapminder, mapping = aes(x = year, y = lifeExp, group = country)) + geom_line(colour = &quot;blue&quot;) + geom_point() 7.1 Challenge 3 Switch the order of the point and line layers from the previous example. What happened? 7.1 Solution to challenge 3 Switch the order of the point and line layers from the previous example. What happened? ggplot(data = gapminder, mapping = aes(x = year, y = lifeExp, group = country)) + geom_point() + geom_line(mapping = aes(colour = continent)) The lines now get drawn over the points! 7.2 Transformations and statistics ggplot2 also makes it easy to overlay statistical models over the data. To demonstrate we’ll go back to our first example: ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point() Currently it’s hard to see the relationship between the points due to some strong outliers in GDP per capita. We can change the scale of units on the x axis using the scale functions. These control the mapping between the data values and visual values of an aesthetic. We can also modify the transparency of the points, using the alpha function, which is especially helpful when you have a large amount of data which is very clustered. ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point(alpha = 0.5) + scale_x_log10() The log10 function applied a transformation to the values of the gdpPercap column before rendering them on the plot, so that each multiple of 10 now only corresponds to an increase in 1 on the transformed scale, e.g. a GDP per capita of 1,000 is now 3 on the y axis, a value of 10,000 corresponds to 4 on the y axis and so on. This makes it easier to visualize the spread of data on the x-axis. 7.2 Tip Reminder: Setting an aesthetic to a value instead of a mapping Notice that we used geom_point(alpha = 0.5). As the previous tip mentioned, using a setting outside of the aes() function will cause this value to be used for all points, which is what we want in this case. But just like any other aesthetic setting, alpha can also be mapped to a variable in the data. For example, we can give a different transparency to each continent with geom_point(mapping = aes(alpha = continent)). We can fit a simple relationship to the data by adding another layer, geom_smooth: ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point() + scale_x_log10() + geom_smooth(method = &quot;lm&quot;) We can make the line thicker by setting the size aesthetic in the geom_smooth layer: ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point() + scale_x_log10() + geom_smooth(method = &quot;lm&quot;, size = 1.5) There are two ways an aesthetic can be specified. Here we set the size aesthetic by passing it as an argument to geom_smooth. Previously in the lesson we’ve used the aes function to define a mapping between data variables and their visual representation. 7.2 Challenge 4a Modify the colour and size of the points on the point layer in the previous example. Hint: do not use the aes function. 7.2 Solution to challenge 4a Modify the colour and size of the points on the point layer in the previous example. Hint: do not use the aes function. ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point(size = 3, colour = &quot;orange&quot;) + scale_x_log10() + geom_smooth(method = &quot;lm&quot;, size = 1.5) 7.2 Challenge 4b Modify your solution to Challenge 4a so that the points are now a different shape and are coloured by continent with new trendlines. Hint: The colour argument can be used inside the aesthetic. 7.2 Solution to challenge 4b Modify Challenge 4 so that the points are now a different shape and are coloured by continent with new trendlines. Hint: The colour argument can be used inside the aesthetic. ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp, colour = continent)) + geom_point(size = 3, shape = 17) + scale_x_log10() + geom_smooth(method = &quot;lm&quot;, size = 1.5) 7.3 Multi-panel figures Earlier we visualized the change in life expectancy over time across all countries in one plot. Alternatively, we can split this out over multiple panels by adding a layer of facet panels. 7.3 Tip We start by making a subset of data including only countries located in the Americas. asia_oceania &lt;- gapminder[gapminder$continent == c(&quot;Asia&quot;, &quot;Oceania&quot;),] # library(dplyr) # asia_oceania &lt;- filter(gapminder, continent %in% c(&quot;Asia&quot;, &quot;Oceania&quot;)) ggplot(data = asia_oceania, mapping = aes(x = year, y = lifeExp)) + geom_line() + facet_wrap( ~ country) The facet_wrap layer took a “formula” as its argument, denoted by the tilde (~). This tells R to draw a panel for each unique value in the country column of the gapminder dataset. 7.4 Modifying text To clean this figure up for a publication we need to change some of the text elements. The x-axis is too cluttered, and the y axis should read “Life expectancy”, rather than the column name in the data frame. We can do this by adding a couple of different layers. The theme layer controls the axis text, and overall text size. Labels for the axes, plot title and any legend can be set using the labs function. Legend titles are set using the same names we used in the aes specification. Thus below the colour legend title is set using colour = \"Continent\", while the title of a fill legend would be set using fill = \"MyTitle\". ggplot(data = asia_oceania, mapping = aes(x = year, y = lifeExp, colour = continent)) + geom_line() + facet_wrap( ~ country) + labs( x = &quot;Year&quot;, # x axis title y = &quot;Life expectancy&quot;, # y axis title title = &quot;Figure 1&quot;, # main title of figure colour = &quot;Continent&quot; # title of legend ) + theme(axis.text.x = element_text(angle = 90, hjust = 1), plot.title = element_text(face = &quot;bold&quot;)) 7.4 Tip Note that we apply a “theme” definition to rotate the x-axis labels to maintain readability. Nearly everything in ggplot2 is customizable. 7.5 Exporting the plot The ggsave() function allows you to export a plot created with ggplot. You can specify the dimension and resolution of your plot by adjusting the appropriate arguments (width, height and dpi) to create high quality graphics for publication. In order to save the plot from above, we first assign it to a variable lifeExp_plot, then tell ggsave to save that plot in png format to a directory called results. (Make sure you have a results/ folder in your working directory.) lifeExp_plot &lt;- ggplot(data = asia_oceania, mapping = aes(x = year, y = lifeExp, colour = continent)) + geom_line() + facet_wrap( ~ country) + labs( x = &quot;Year&quot;, # x axis title y = &quot;Life expectancy&quot;, # y axis title title = &quot;Figure 1&quot;, # main title of figure colour = &quot;Continent&quot; # title of legend ) + theme(axis.text.x = element_text(angle = 90, hjust = 1), plot.title = element_text(face = &quot;bold&quot;)) ggsave(filename = &quot;results/lifeExp.png&quot;, plot = lifeExp_plot, width = 18, height = 16, units = &quot;cm&quot;) ggsave(filename = &quot;results/lifeExp_widetv.png&quot;, plot = lifeExp_plot, width = 13.33, height = 7.5) There are two nice things about ggsave. First, it defaults to the last plot, so if you omit the plot argument it will automatically save the last plot you created with ggplot. Secondly, it tries to determine the format you want to save your plot in from the file extension you provide for the filename (for example .png or .pdf). If you need to, you can specify the format explicitly in the device argument. This is a taste of what you can do with ggplot2. RStudio provides a really useful cheat sheet of the different layers available, and more extensive documentation is available on the ggplot2 website. Finally, if you have no idea how to change something, a quick Google search will usually send you to a relevant question and answer on Stack Overflow with reusable code to modify! "],
["dataframe-manipulation-with-dplyr.html", "Chapter 8 Dataframe Manipulation with dplyr 8.1 The dplyr package 8.2 Using select() 8.3 Using filter() 8.4 Using filter() with pipes 8.4 Challenge 1 8.4 Solution to Challenge 1 8.5 Using group_by() and summarize() 8.6 Using summarize() 8.6 Challenge 2 8.6 Solution to Challenge 2 8.7 count() and n() 8.8 Using mutate() 8.9 Connect mutate with logical filtering: ifelse 8.10 Combining dplyr and ggplot2 8.10 Advanced Challenge 8.10 Solution to Advanced Challenge 8.11 Other great resources", " Chapter 8 Dataframe Manipulation with dplyr Remembering that we can use the readr package to read external data into R, for this lesson we are going to use the gapminder data: library(&quot;readr&quot;) gapminder &lt;- read_csv(&quot;data/gapminder_data.csv&quot;) Parsed with column specification: cols( country = col_character(), year = col_double(), pop = col_double(), continent = col_character(), lifeExp = col_double(), gdpPercap = col_double() ) gapminder # A tibble: 1,704 x 6 country year pop continent lifeExp gdpPercap &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Afghanistan 1952 8425333 Asia 28.8 779. 2 Afghanistan 1957 9240934 Asia 30.3 821. 3 Afghanistan 1962 10267083 Asia 32.0 853. 4 Afghanistan 1967 11537966 Asia 34.0 836. 5 Afghanistan 1972 13079460 Asia 36.1 740. 6 Afghanistan 1977 14880372 Asia 38.4 786. 7 Afghanistan 1982 12881816 Asia 39.9 978. 8 Afghanistan 1987 13867957 Asia 40.8 852. 9 Afghanistan 1992 16317921 Asia 41.7 649. 10 Afghanistan 1997 22227415 Asia 41.8 635. # ... with 1,694 more rows Manipulation of dataframes means many things to many researchers, we often select certain observations (rows) or variables (columns), we often group the data by a certain variable(s), or we even calculate summary statistics. We can do these types of operations using the normal base R operations: mean(gapminder$gdpPercap) [1] 7215.327 The question here is how might you take averages (or any other summary statistic) by some group you might be interested in. 8.1 The dplyr package Luckily, the dplyr package provides a number of very useful functions for manipulating dataframes in a way that will reduce the above repetition, reduce the probability of making errors, and probably even save you some typing. As an added bonus, you might even find the dplyr grammar easier to read. Here we’re going to cover 5 of the most commonly used functions as well as using pipes (%&gt;%) to combine them. select() filter() group_by() summarize() mutate() If you have have not installed this package earlier, please do so: install.packages(&#39;dplyr&#39;) Now let’s load the package: library(&quot;dplyr&quot;) 8.2 Using select() If, for example, we wanted to move forward with only a few of the variables in our dataframe we could use the select() function. This will keep only the variables you select. year_country_gdp &lt;- select(gapminder, year, country, gdpPercap) 8.3 Using filter() To select on some subset of rows: filter(gapminder, continent == &quot;Europe&quot;) # A tibble: 360 x 6 country year pop continent lifeExp gdpPercap &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Albania 1952 1282697 Europe 55.2 1601. 2 Albania 1957 1476505 Europe 59.3 1942. 3 Albania 1962 1728137 Europe 64.8 2313. 4 Albania 1967 1984060 Europe 66.2 2760. 5 Albania 1972 2263554 Europe 67.7 3313. 6 Albania 1977 2509048 Europe 68.9 3533. 7 Albania 1982 2780097 Europe 70.4 3631. 8 Albania 1987 3075321 Europe 72 3739. 9 Albania 1992 3326498 Europe 71.6 2497. 10 Albania 1997 3428038 Europe 73.0 3193. # ... with 350 more rows Above we used ‘normal’ grammar, but the strengths of dplyr lie in combining several functions using pipes. This description is very useful: I work up %&gt;% showered %&gt;% dressed %&gt;% had coffee %&gt;% came to an R workshop Since the pipes grammar is unlike anything we’ve seen in R before, let’s repeat what we’ve done above using pipes. year_country_gdp &lt;- gapminder %&gt;% select(year, country, gdpPercap) To help you understand why we wrote that in that way, let’s walk through it step by step. First we summon the gapminder dataframe and pass it on, using the pipe symbol %&gt;%, to the next step, which is the select() function. In this case we don’t specify which data object we use in the select() function since in gets that from the previous pipe. Fun Fact: There is a good chance you have encountered pipes before in the shell. In R, a pipe symbol is %&gt;% while in the shell it is | but the concept is the same! 8.4 Using filter() with pipes If we now wanted to move forward with the above, but only with European countries, we can combine select and filter year_country_gdp_euro &lt;- gapminder %&gt;% filter(continent == &quot;Europe&quot;) %&gt;% select(year, country, gdpPercap) 8.4 Challenge 1 Write a single command (which can span multiple lines and includes pipes) that will produce a dataframe that has the African values for lifeExp, country and year, but not for other Continents. How many rows does your dataframe have and why? 8.4 Solution to Challenge 1 year_country_lifeExp_Africa &lt;- gapminder %&gt;% filter(continent == &quot;Africa&quot;) %&gt;% select(year, country, lifeExp) As with last time, first we pass the gapminder dataframe to the filter() function, then we pass the filtered version of the gapminder dataframe to the select() function. Note: The order of operations is very important in this case. If we used ‘select’ first, filter would not be able to find the variable continent since we would have removed it in the previous step. 8.5 Using group_by() and summarize() Now, we were supposed to be reducing the error prone repetitiveness of what can be done with base R, but up to now we haven’t done that since we would have to repeat the above for each continent. Instead of filter(), which will only pass observations that meet your criteria (in the above: continent==\"Europe\"), we can use group_by(), which will essentially use every unique criteria that you could have used in filter. gapminder # A tibble: 1,704 x 6 country year pop continent lifeExp gdpPercap &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Afghanistan 1952 8425333 Asia 28.8 779. 2 Afghanistan 1957 9240934 Asia 30.3 821. 3 Afghanistan 1962 10267083 Asia 32.0 853. 4 Afghanistan 1967 11537966 Asia 34.0 836. 5 Afghanistan 1972 13079460 Asia 36.1 740. 6 Afghanistan 1977 14880372 Asia 38.4 786. 7 Afghanistan 1982 12881816 Asia 39.9 978. 8 Afghanistan 1987 13867957 Asia 40.8 852. 9 Afghanistan 1992 16317921 Asia 41.7 649. 10 Afghanistan 1997 22227415 Asia 41.8 635. # ... with 1,694 more rows gapminder %&gt;% group_by(continent) # A tibble: 1,704 x 6 # Groups: continent [5] country year pop continent lifeExp gdpPercap &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Afghanistan 1952 8425333 Asia 28.8 779. 2 Afghanistan 1957 9240934 Asia 30.3 821. 3 Afghanistan 1962 10267083 Asia 32.0 853. 4 Afghanistan 1967 11537966 Asia 34.0 836. 5 Afghanistan 1972 13079460 Asia 36.1 740. 6 Afghanistan 1977 14880372 Asia 38.4 786. 7 Afghanistan 1982 12881816 Asia 39.9 978. 8 Afghanistan 1987 13867957 Asia 40.8 852. 9 Afghanistan 1992 16317921 Asia 41.7 649. 10 Afghanistan 1997 22227415 Asia 41.8 635. # ... with 1,694 more rows You will notice that the structure of the dataframe where we used group_by() (grouped_df) is not the same as the original gapminder (data.frame). A grouped_df can be thought of as a list where each item in the list is a data.frame which contains only the rows that correspond to the a particular value continent (at least in the example above). 8.6 Using summarize() The above was a bit on the uneventful side but group_by() is much more exciting in conjunction with summarize(). This will allow us to create new variable(s) by using functions that repeat for each of the continent-specific data frames. That is to say, using the group_by() function, we split our original dataframe into multiple pieces, then we can run functions (e.g. mean() or sd()) within summarize(). gdp_bycontinents &lt;- gapminder %&gt;% group_by(continent) %&gt;% summarize(mean_gdpPercap = mean(gdpPercap)) continent mean_gdpPercap &lt;fctr&gt; &lt;dbl&gt; 1 Africa 2193.755 2 Americas 7136.110 3 Asia 7902.150 4 Europe 14469.476 5 Oceania 18621.609 That allowed us to calculate the mean gdpPercap for each continent, but it gets even better. 8.6 Challenge 2 Calculate the average life expectancy per country. Which has the longest average life expectancy and which has the shortest average life expectancy? 8.6 Solution to Challenge 2 lifeExp_bycountry &lt;- gapminder %&gt;% group_by(country) %&gt;% summarize(mean_lifeExp = mean(lifeExp)) lifeExp_bycountry %&gt;% filter(mean_lifeExp == min(mean_lifeExp) | mean_lifeExp == max(mean_lifeExp)) # A tibble: 2 x 2 country mean_lifeExp &lt;chr&gt; &lt;dbl&gt; 1 Iceland 76.5 2 Sierra Leone 36.8 Another way to do this is to use the dplyr function arrange(), which arranges the rows in a data frame according to the order of one or more variables from the data frame. It has similar syntax to other functions from the dplyr package. You can use desc() inside arrange() to sort in descending order. lifeExp_bycountry %&gt;% arrange(mean_lifeExp) %&gt;% head(1) # A tibble: 1 x 2 country mean_lifeExp &lt;chr&gt; &lt;dbl&gt; 1 Sierra Leone 36.8 lifeExp_bycountry %&gt;% arrange(desc(mean_lifeExp)) %&gt;% head(1) # A tibble: 1 x 2 country mean_lifeExp &lt;chr&gt; &lt;dbl&gt; 1 Iceland 76.5 The function group_by() allows us to group by multiple variables. Let’s group by year and continent. gdp_bycontinents_byyear &lt;- gapminder %&gt;% group_by(continent, year) %&gt;% summarize(mean_gdpPercap = mean(gdpPercap)) That is already quite powerful, but it gets even better! You’re not limited to defining 1 new variable in summarize(). gdp_pop_bycontinents_byyear &lt;- gapminder %&gt;% group_by(continent, year) %&gt;% summarize(mean_gdpPercap = mean(gdpPercap), sd_gdpPercap = sd(gdpPercap), mean_pop = mean(pop), sd_pop = sd(pop)) 8.7 count() and n() A very common operation is to count the number of observations for each group. The dplyr package comes with two related functions that help with this. For instance, if we wanted to check the number of countries included in the dataset for the year 2002, we can use the count() function. It takes the name of one or more columns that contain the groups we are interested in, and we can optionally sort the results in descending order by adding sort=TRUE: gapminder %&gt;% filter(year == 2002) %&gt;% count(continent, sort = TRUE) # A tibble: 5 x 2 continent n &lt;chr&gt; &lt;int&gt; 1 Africa 52 2 Asia 33 3 Europe 30 4 Americas 25 5 Oceania 2 If we need to use the number of observations in calculations, the n() function is useful. It will return the total number of observations in the current group rather than counting the number of observations in each group within a specific column. For instance, if we wanted to get the standard error of the life expectency per continent: gapminder %&gt;% group_by(continent) %&gt;% summarize(se_le = sd(lifeExp)/sqrt(n())) # A tibble: 5 x 2 continent se_le &lt;chr&gt; &lt;dbl&gt; 1 Africa 0.366 2 Americas 0.540 3 Asia 0.596 4 Europe 0.286 5 Oceania 0.775 You can also chain together several summary operations; in this case calculating the minimum, maximum, mean and se of each continent’s per-country life-expectancy: gapminder %&gt;% group_by(continent) %&gt;% summarize( mean_le = mean(lifeExp), min_le = min(lifeExp), max_le = max(lifeExp), se_le = sd(lifeExp)/sqrt(n())) # A tibble: 5 x 5 continent mean_le min_le max_le se_le &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Africa 48.9 23.6 76.4 0.366 2 Americas 64.7 37.6 80.7 0.540 3 Asia 60.1 28.8 82.6 0.596 4 Europe 71.9 43.6 81.8 0.286 5 Oceania 74.3 69.1 81.2 0.775 8.8 Using mutate() We can also create new variables prior to (or even after) summarizing information using mutate(). gdp_pop_bycontinents_byyear &lt;- gapminder %&gt;% mutate(gdp_billion = gdpPercap*pop/10^9) %&gt;% group_by(continent,year) %&gt;% summarize(mean_gdpPercap = mean(gdpPercap), sd_gdpPercap = sd(gdpPercap), mean_pop = mean(pop), sd_pop = sd(pop), mean_gdp_billion = mean(gdp_billion), sd_gdp_billion = sd(gdp_billion)) 8.9 Connect mutate with logical filtering: ifelse When creating new variables, we can hook this with a logical condition. A simple combination of mutate() and ifelse() facilitates filtering right where it is needed: in the moment of creating something new. This easy-to-read statement is a fast and powerful way of discarding certain data (even though the overall dimension of the data frame will not change) or for updating values depending on this given condition. ## keeping all data but &quot;filtering&quot; after a certain condition # calculate GDP only for people with a life expectation above 25 gdp_pop_bycontinents_byyear_above25 &lt;- gapminder %&gt;% mutate(gdp_billion = ifelse(lifeExp &gt; 25, gdpPercap * pop / 10^9, NA)) %&gt;% group_by(continent, year) %&gt;% summarize(mean_gdpPercap = mean(gdpPercap), sd_gdpPercap = sd(gdpPercap), mean_pop = mean(pop), sd_pop = sd(pop), mean_gdp_billion = mean(gdp_billion), sd_gdp_billion = sd(gdp_billion)) ## updating only if certain condition is fullfilled # for life expectations above 40 years, the gpd to be expected in the future is scaled gdp_future_bycontinents_byyear_high_lifeExp &lt;- gapminder %&gt;% mutate(gdp_futureExpectation = ifelse(lifeExp &gt; 40, gdpPercap * 1.5, gdpPercap)) %&gt;% group_by(continent, year) %&gt;% summarize(mean_gdpPercap = mean(gdpPercap), mean_gdpPercap_expected = mean(gdp_futureExpectation)) 8.10 Combining dplyr and ggplot2 First install and load ggplot2: install.packages(&#39;ggplot2&#39;) library(&quot;ggplot2&quot;) In the plotting lesson we looked at how to make a multi-panel figure by adding a layer of facet panels using ggplot2. Here is the code we used (with some extra comments): # Filter countries that start with &quot;A&quot; a_countries &lt;- gapminder %&gt;% filter(country %in% c(&quot;Afghanistan&quot;, &quot;Albania&quot;, &quot;Algeria&quot;, &quot;Angola&quot;, &quot;Argentina&quot;, &quot;Australia&quot;, &quot;Austria&quot;)) # Make the plot ggplot(data = a_countries, aes(x = year, y = lifeExp, color = continent)) + geom_line() + facet_wrap( ~ country) This code makes the right plot but it also provides a way to chain operations. Just as we used %&gt;% to pipe data along a chain of dplyr functions we can use it to pass data to ggplot(). Because %&gt;% replaces the first argument in a function we don’t need to specify the data = argument in the ggplot() function. By combining dplyr and ggplot2 functions we can alter this figure for only those continents in Europe. gapminder %&gt;% filter(country %in% c(&quot;Afghanistan&quot;, &quot;Albania&quot;, &quot;Algeria&quot;, &quot;Angola&quot;, &quot;Argentina&quot;, &quot;Australia&quot;, &quot;Austria&quot;)) %&gt;% filter(continent == &quot;Europe&quot;) %&gt;% ggplot(aes(x = year, y = lifeExp, color = continent)) + geom_line() + facet_wrap( ~ country) Using dplyr functions also helps us do calculations on the fly, for example if we were interested in converting lifeExp which is in years to days: gapminder %&gt;% filter(country %in% c(&quot;Afghanistan&quot;, &quot;Albania&quot;, &quot;Algeria&quot;, &quot;Angola&quot;, &quot;Argentina&quot;, &quot;Australia&quot;, &quot;Austria&quot;)) %&gt;% filter(continent == &quot;Europe&quot;) %&gt;% mutate(num_days = lifeExp*365) %&gt;% ggplot(aes(x = year, y = num_days, color = continent)) + geom_line() + facet_wrap( ~ country) 8.10 Advanced Challenge Calculate the average life expectancy in 2002 of 2 randomly selected countries for each continent. Then arrange the continent names in reverse order. Hint: Use the dplyr functions arrange() and sample_n(), they have similar syntax to other dplyr functions. 8.10 Solution to Advanced Challenge lifeExp_2countries_bycontinents &lt;- gapminder %&gt;% filter(year==2002) %&gt;% group_by(continent) %&gt;% sample_n(2) %&gt;% summarize(mean_lifeExp=mean(lifeExp)) %&gt;% arrange(desc(mean_lifeExp)) 8.11 Other great resources R for Data Science Data Wrangling Cheat sheet Introduction to dplyr Data wrangling with R and RStudio "],
["dataframe-manipulation-with-tidyr.html", "Chapter 9 Dataframe Manipulation with tidyr 9.1 Getting started 9.1 Challenge 1 9.1 Solution to Challenge 1 9.2 Convert long format with gather() 9.3 Advantage to plotting and tables 9.4 Other great resources", " Chapter 9 Dataframe Manipulation with tidyr Researchers often want to manipulate their data from the ‘wide’ to the ‘long’ format, or vice-versa. The ‘long’ format is where: each column is a variable each row is an observation In the ‘long’ format, you usually have 1 column for the observed variable and the other columns are ID variables. For the ‘wide’ format each row is often a site/subject/patient and you have multiple observation variables containing the same type of data. These can be either repeated observations over time, or observation of multiple variables (or a mix of both). You may find data input may be simpler or some other applications may prefer the ‘wide’ format. However, many of R‘s functions have been designed assuming you have ’long’ format data. This tutorial will help you efficiently transform your data regardless of original format. These data formats mainly affect readability. For humans, the wide format is often more intuitive since we can often see more of the data on the screen due to its shape. However, the long format is more machine readable and is closer to the formatting of databases. The ID variables in our dataframes are similar to the fields in a database and observed variables are like the database values. 9.1 Getting started First install the packages if you haven’t already done so (you probably installed dplyr in the previous lesson): install.packages(&quot;tidyr&quot;) install.packages(&quot;dplyr&quot;) install.packages(&quot;readr&quot;) Load the packages library(&quot;tidyr&quot;) library(&quot;dplyr&quot;) library(&quot;readr&quot;) First, lets look at the structure of our original gapminder dataframe: gapminder &lt;- read_csv(&quot;data/gapminder_data.csv&quot;) Parsed with column specification: cols( country = col_character(), year = col_double(), pop = col_double(), continent = col_character(), lifeExp = col_double(), gdpPercap = col_double() ) gapminder # A tibble: 1,704 x 6 country year pop continent lifeExp gdpPercap &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Afghanistan 1952 8425333 Asia 28.8 779. 2 Afghanistan 1957 9240934 Asia 30.3 821. 3 Afghanistan 1962 10267083 Asia 32.0 853. 4 Afghanistan 1967 11537966 Asia 34.0 836. 5 Afghanistan 1972 13079460 Asia 36.1 740. 6 Afghanistan 1977 14880372 Asia 38.4 786. 7 Afghanistan 1982 12881816 Asia 39.9 978. 8 Afghanistan 1987 13867957 Asia 40.8 852. 9 Afghanistan 1992 16317921 Asia 41.7 649. 10 Afghanistan 1997 22227415 Asia 41.8 635. # ... with 1,694 more rows 9.1 Challenge 1 Is gapminder a purely long, purely wide, or some intermediate format? 9.1 Solution to Challenge 1 The original gapminder data.frame is in an intermediate format. It is not purely long since it had multiple observation variables (pop,lifeExp,gdpPercap). Sometimes, as with the gapminder dataset, we have multiple types of observed data. It is somewhere in between the purely ‘long’ and ‘wide’ data formats. We have 3 “ID variables” (continent, country, year) and 3 “Observation variables” (pop,lifeExp,gdpPercap). This intermediate format can be preferred despite not having ALL observations in 1 column given that all 3 observation variables have different units. There are few operations that would need us to stretch out this dataframe any longer (i.e. 4 ID variables and 1 Observation variable). While using many of the functions in R, which are often vector based, you usually do not want to do mathematical operations on values with different units. For example, using the purely long format, a single mean for all of the values of population, life expectancy, and GDP would not be meaningful since it would return the mean of values with 3 incompatible units. The solution is that we first manipulate the data either by grouping (see the lesson on dplyr), or we change the structure of the dataframe. Note: Some plotting functions in R actually work better in the wide format data. 9.2 Convert long format with gather() Here we have used piping syntax which is similar to what we were doing in the previous lesson with dplyr. In fact, these are compatible and you can use a mix of tidyr and dplyr functions by piping them together Inside gather() we first name the new column for the new ID variable and then the value column taking the country, year and continent variables out of the gathering process: gapminder_long &lt;- gapminder %&gt;% gather(key = vars, value = value, -country, -year, -continent) Inside spread() we have the opposite situation where we take the vars column and spread it over to separate columns with value filling those cells: gapminder_wide &lt;- gapminder_long %&gt;% spread(key = vars, value = value) 9.3 Advantage to plotting and tables Reshaping your data from wide to long provides considerable flexibility for presenting your results. Combining some dplyr grouping code with tidyr we can produce a nice table: gapminder %&gt;% gather(key = vars, value = value, -country, -year, -continent) %&gt;% group_by(continent, vars) %&gt;% summarise(total_pop = sum(value)) %&gt;% spread(key = continent, value = total_pop) # A tibble: 3 x 6 vars Africa Americas Asia Europe Oceania &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 gdpPercap 1368903. 2140833. 3129252. 5209011. 446919. 2 lifeExp 30492. 19398. 23786. 25885. 1784. 3 pop 6187585961 7351438499 30507333902. 6181115304 212992136 Similarly, gathering can provide considerable more flexibility when plotting by grouping variables we might want to facet as well as using some additional dplyr content: library(ggplot2) gapminder_long %&gt;% filter(continent == &quot;Oceania&quot;) %&gt;% ggplot(aes(x = year, y = value, colour = country)) + geom_line() + facet_wrap(~vars, scales = &quot;free_y&quot;, ncol = 1) 9.4 Other great resources R for Data Science Data Wrangling Cheat sheet Introduction to tidyr Data wrangling with R and RStudio "],
["seeking-help-from-others-with-reprex.html", "Chapter 10 Seeking Help from Others with reprex 10.1 Help People Help You - reprex 10.2 Other Helpful Resources", " Chapter 10 Seeking Help from Others with reprex If you’re having trouble using a function or package, or getting the syntax correct, 9 times out of 10 the answers you are seeking have already been asked and answered on-line: RStudio Community Stack Overflow. You can search using the [r] tag. Google If you can’t find the answer on-line, there are some on-line forums to seek help from the bcgov R community: bcgov Yammer channels (e.g. R, Data Science CoP) bcgov RocketChat #rstats channel 10.1 Help People Help You - reprex Whan starting a conversation about code, there are a few things that when included make that conversation more efficient and pleasant for everyone: some sample data (preferably provided in the code) some code (with comments, white-space, indents == make it easy to read) information about your computing environment, like your operating system, version of R, the packages you have loaded reprex: An R package to help prepare a reproducible example — or reprex — for posting to GitHub issues, StackOverflow, RocketChat snippets, or email and so on. # install.packages(&quot;reprex&quot;) # load libraries we need library(reprex) library(readr) library(dplyr) library(ggplot2) # read in data cats &lt;- read_csv(file = &quot;data/feline-data.csv&quot;) # munge data and make bar plot cats %&gt;% select(coat, weight) %&gt;% ggplot(aes(x = coat, y = weight)) + geom_col() # error in syntax - this does not work cats %&gt;% select(coat, weight) %&gt;% ggplot(aes(x = coat, y = weight)) %&gt;% geom_col() Error: `mapping` must be created by `aes()` Did you use %&gt;% instead of +? You have read the error message but it was not helpful, you used ?ggplot2, and looked on-line and I still cannot find an answer. Maybe someone in the bcgovR community knows? We need to invest a bit of time making the buggy code shareable – the easier it is for someone to run the code, the easier – and likely faster – someone might be able to provide some help. If the data is shareable (e.g. available in the B.C. Data Catalogue with appropriate licence, publicly available) then we can use dput(): # use dput to make data set with code dput(cats) structure(list(coat = c(&quot;calico&quot;, &quot;black&quot;, &quot;tabby&quot;), weight = c(2.1, 5, 3.2), likes_string = c(1, 0, 1)), class = c(&quot;spec_tbl_df&quot;, &quot;tbl_df&quot;, &quot;tbl&quot;, &quot;data.frame&quot;), row.names = c(NA, -3L), spec = structure(list( cols = list(coat = structure(list(), class = c(&quot;collector_character&quot;, &quot;collector&quot;)), weight = structure(list(), class = c(&quot;collector_double&quot;, &quot;collector&quot;)), likes_string = structure(list(), class = c(&quot;collector_double&quot;, &quot;collector&quot;))), default = structure(list(), class = c(&quot;collector_guess&quot;, &quot;collector&quot;)), skip = 1), class = &quot;col_spec&quot;)) cats &lt;- structure(list(coat = c(&quot;calico&quot;, &quot;black&quot;, &quot;tabby&quot;), weight = c(2.1, 5, 3.2), likes_string = c(1, 0, 1)), class = c(&quot;spec_tbl_df&quot;, &quot;tbl_df&quot;, &quot;tbl&quot;, &quot;data.frame&quot;), row.names = c(NA, -3L), spec = structure(list( cols = list(coat = structure(list(), class = c(&quot;collector_character&quot;, &quot;collector&quot;)), weight = structure(list(), class = c(&quot;collector_double&quot;, &quot;collector&quot;)), likes_string = structure(list(), class = c(&quot;collector_double&quot;, &quot;collector&quot;))), default = structure(list(), class = c(&quot;collector_guess&quot;, &quot;collector&quot;)), skip = 1), class = &quot;col_spec&quot;)) # error in syntax - this does not work cats %&gt;% select(coat, weight) %&gt;% ggplot(aes(x = coat, y = weight)) %&gt;% geom_col() Error: `mapping` must be created by `aes()` Did you use %&gt;% instead of +? dput() will dump the data you’re working with into a format so that it can be copy and pasted by anyone else into their R session. If the data is not shareable, you can use some built in data and re-create the issue: # ?datasets # built in datasets # ?starwars # ships with dplyr # View(starwars) # error in syntax - this does not work starwars %&gt;% select(name, height) %&gt;% ggplot(aes(x = name, y = height)) %&gt;% geom_col() Error: `mapping` must be created by `aes()` Did you use %&gt;% instead of +? Once the code is ready for sharing, select the code and use reprex_selection() or the clickable RStudio Addin to copy the formatted code to the clipboard for sharing on-line (demonstrated). Sometimes it is useful to share information about your computing environment as well: sessionInfo() R version 3.6.1 (2019-07-05) Platform: x86_64-w64-mingw32/x64 (64-bit) Running under: Windows 10 x64 (build 17763) Matrix products: default locale: [1] LC_COLLATE=English_Canada.1252 LC_CTYPE=English_Canada.1252 [3] LC_MONETARY=English_Canada.1252 LC_NUMERIC=C [5] LC_TIME=English_Canada.1252 attached base packages: [1] stats graphics grDevices utils datasets methods base other attached packages: [1] reprex_0.3.0 ggforce_0.3.1 tidyr_1.0.0 dplyr_0.8.3 [5] ggplot2_3.2.1 readr_1.3.1 knitr_1.25 testthat_2.2.1 [9] devtools_2.2.1 usethis_1.5.1 loaded via a namespace (and not attached): [1] tidyselect_0.2.5 xfun_0.9 remotes_2.1.0 [4] purrr_0.3.2 colorspace_1.4-1 vctrs_0.2.0 [7] htmltools_0.3.6 yaml_2.2.0 utf8_1.1.4 [10] rlang_0.4.0 pkgbuild_1.0.5 pillar_1.4.2 [13] glue_1.3.1 withr_2.1.2 tweenr_1.0.1 [16] sessioninfo_1.1.1 lifecycle_0.1.0 stringr_1.4.0 [19] munsell_0.5.0 gtable_0.3.0 evaluate_0.14 [22] memoise_1.1.0 labeling_0.3 callr_3.3.2 [25] ps_1.3.0 fansi_0.4.0 Rcpp_1.0.2 [28] backports_1.1.4 scales_1.0.0 desc_1.2.0 [31] pkgload_1.0.2 farver_1.1.0 fs_1.3.1 [34] hms_0.5.1 packrat_0.5.0 digest_0.6.21 [37] stringi_1.4.3 bookdown_0.13 processx_3.4.1 [40] polyclip_1.10-0 rprojroot_1.3-2 grid_3.6.1 [43] cli_1.1.0 tools_3.6.1 magrittr_1.5 [46] lazyeval_0.2.2 tibble_2.1.3 crayon_1.3.4 [49] pkgconfig_2.0.3 zeallot_0.1.0 MASS_7.3-51.4 [52] ellipsis_0.3.0 rsconnect_0.8.15 prettyunits_1.0.2 [55] assertthat_0.2.1 rmarkdown_1.15 rstudioapi_0.10 [58] R6_2.4.0 compiler_3.6.1 sessionInfo() will print out your current version of R, as well as any packages you have loaded. This can be useful for others to help reproduce and debug your issue. 10.2 Other Helpful Resources RStudio cheat sheets Quick R Cookbook for R "]
]
